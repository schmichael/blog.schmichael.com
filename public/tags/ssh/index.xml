<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssh on </title>
    <link>/tags/ssh/</link>
    <description>Recent content in Ssh on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 26 Feb 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bazaar: DVCS for Dummies</title>
      <link>/2009/02/26/bazaar-dvcs-for-dummies/</link>
      <pubDate>Thu, 26 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/02/26/bazaar-dvcs-for-dummies/</guid>
      <description>&lt;p&gt;I like &lt;a href=&#34;http://bazaar-vcs.org/&#34;&gt;Bazaar (bzr)&lt;/a&gt;. It doesn&amp;#8217;t make me popular in the &lt;a href=&#34;http://www.selenic.com/mercurial/&#34;&gt;Mercurial&lt;/a&gt;-centric Pythonosphere. It doesn&amp;#8217;t make me a 1337 ÃƒÂ¼ber hacker like &lt;a href=&#34;http://whygitisbetterthanx.com/&#34;&gt;git&lt;/a&gt; would.&lt;/p&gt;

&lt;p&gt;However, it does meet the most important criteria: &lt;strong&gt;It just works&lt;/strong&gt; &lt;em&gt;for me&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now for the big disclaimer: Most of the projects I use bzr to manage fall into 1 of 2 categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Projects with small teams (1-4 developers)&lt;/li&gt;
&lt;li&gt;Public projects where I just want to grab the source and maybe maintain some local patches&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If I needed to somehow manage a project with dozens or hundreds of contributors (like Gnome or the Linux Kernel), git would probably look a lot more appealing to me. After all, it was designed for large code bases with lots of contributors and branches.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve seen lots of &lt;a href=&#34;http://www.nardol.org/2009/2/19/git-basics-reversing-the-git-sucks-effect&#34;&gt;git cookbooks popping up lately&lt;/a&gt;, so I thought I&amp;#8217;d explain my bzr workflow for the 2 use cases I list above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Starting and sharing a project with a small team&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prerequisite: You&amp;#8217;ve created a directory with some code in it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Turn your source code directory into a bzr repository: &lt;pre lang=&#34;bash&#34;&gt;~/src/foo$ bzr init&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add you source files: &lt;pre lang=&#34;bash&#34;&gt;~/src/foo$ bzr add&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit: &lt;pre lang=&#34;bash&#34;&gt;~/src/foo$ bzr ci&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push my changes to a remote location* other team members can access: &lt;pre lang=&#34;bash&#34;&gt;~/src/foo$ bzr push &amp;ndash;remember sftp://some/file/server&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Done! My favorite part is that besides the &lt;code&gt;--remember&lt;/code&gt; option, bzr just does what you expect without any flags or configuring. The &lt;code&gt;--remember&lt;/code&gt; option simply tells bzr to use that location for future &lt;code&gt;push&lt;/code&gt; commands (so you can drop all the typing after &amp;#8220;push&amp;#8221;).&lt;/p&gt;

&lt;p&gt;For more information check out the &lt;a href=&#34;http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html#sharing-with-peers&#34;&gt;excellent bazaar documentation on sharing code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Getting the code for an open source project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately most big bzr-hosted projects are on Launchpad which makes for a pretty boring demonstration:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;~/src$ bzr branch lp:terminator # yawn
&lt;/pre&gt;

&lt;p&gt;To make matters worse, non-Launchpad hosted projects are nearly as dull:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;~/src$ bzr branch http://bzr.savannah.gnu.org/r/gnash/trunk
&lt;/pre&gt;

&lt;p&gt;In each case bzr will create a new directory for you using the last part of the source path (terminator &amp;amp; trunk respectively). You can optionally give it a second argument to put the branch in a different location. The destination can even be a remote server!&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;~/src$ bzr branch http://source/branch sftp://destination/branch
&lt;/pre&gt;

&lt;p&gt;Ok now I&amp;#8217;m just showing off. I&amp;#8217;ve never found a use for that feature. ðŸ˜‰ However, I do appreciate that a location is a location to bzr regardless of whether that location is the local filesystem or a remote server. It just works how you&amp;#8217;d expect it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html&#34;&gt;Chapters 4-6 of Bazaar&amp;#8217;s documentation&lt;/a&gt; give some excellent examples of various collaboration workflows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bonus Feature:&lt;/em&gt; Subversion mode!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So its not really &lt;em&gt;Subversion mode&lt;/em&gt;, but bzr does support pulling repositories via the &lt;code&gt;checkout&lt;/code&gt; command and updating your working copy from the remote repository via the &lt;code&gt;update&lt;/code&gt; command just like Subversion. As you would expect, the &lt;code&gt;commit&lt;/code&gt; now sends changes directly to the remote server.&lt;/p&gt;

&lt;p&gt;While I&amp;#8217;ve used this feature mainly to make transitioning to bzr easier for Subversion users, [Bazaar&amp;#8217;s documentation has some excellent techniques for making advanced workflows easier using checkouts][7].&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;** SSH Tips: &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;bzr+ssh is faster than plain old sftp but requires bzr to be installed on the server.&lt;/li&gt;
&lt;li&gt;Setup ssh connection multiplexing using &lt;code&gt;ControlMaster&lt;/code&gt; in &lt;code&gt;~/.ssh/config&lt;/code&gt; and leave an ssh session active to speed up bzr operations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[7]: &lt;a href=&#34;http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html#using-checkouts&#34;&gt;http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html#using-checkouts&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Summer of Hacks</title>
      <link>/2008/05/13/summer-of-hacks/</link>
      <pubDate>Tue, 13 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/05/13/summer-of-hacks/</guid>
      <description>&lt;p&gt;My &lt;a href=&#34;http://www.linode.com/&#34;&gt;Linode&lt;/a&gt; has been experiencing a huge number of brute force login attempts in the past week. I don&amp;#8217;t keep detailed statistics, but I would guess there have been &lt;strong&gt;300 attempts in the past week&lt;/strong&gt; as opposed to &lt;em&gt;the usual rate of about 500 attempts over 200 days (2-3 attempts per day)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://denyhosts.sourceforge.net/&#34;&gt;Denyhosts&lt;/a&gt; has been doing its job perfectly. It should be illegal to run a Internet exposed SSH server without it or a similar tool.*&lt;/p&gt;

&lt;p&gt;Thanks to HoopyCat in #linode for pointing me to a [SANS Internet Storm Center article explaining the &lt;em&gt;Summer of Hacks&lt;/em&gt;][3] phenomenon.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* Unless of course you only accept key based logins.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;[3]: &lt;a href=&#34;http://isc.sans.org/diary.html?storyid=4408&#34;&gt;http://isc.sans.org/diary.html?storyid=4408&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy Rsync Remote Backups Using SSH Keys</title>
      <link>/2008/03/19/easy-rsync-remote-backups-using-ssh-keys/</link>
      <pubDate>Thu, 20 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/03/19/easy-rsync-remote-backups-using-ssh-keys/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.samba.org/rsync/&#34;&gt;Rsync&lt;/a&gt; is an excellent file transfer utility thats especially well suited for backing up files over the Internet because it only transfers the data that has changed. A friend asked me how to set it up, so I thought I&amp;#8217;d post what I sent him here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Backup a directory from computer &lt;code&gt;Zim&lt;/code&gt; to computer &lt;code&gt;Ark&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both &lt;code&gt;Zim&lt;/code&gt; and &lt;code&gt;Ark&lt;/code&gt; are subdomains of &lt;code&gt;example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The user on &lt;code&gt;Ark&lt;/code&gt; which receives the backup files is named &lt;code&gt;backupuser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The user on &lt;code&gt;Zim&lt;/code&gt; with access to the files you want to backup is named &lt;code&gt;steve&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openssh.org/&#34;&gt;ssh&lt;/a&gt; installed on both hosts&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.samba.org/rsync/download.html&#34;&gt;rsync&lt;/a&gt; installed on both hosts&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Login to &lt;code&gt;Zim&lt;/code&gt; via &lt;code&gt;ssh&lt;/code&gt;: &lt;pre lang=&#34;bash&#34;&gt;ssh steve@zim.example.com&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a &lt;code&gt;ssh&lt;/code&gt; key pair using: &lt;pre lang=&#34;bash&#34;&gt;ssh-keygen -t rsa
&amp;lt;press enter when prompted where to save the key&amp;gt;
&amp;lt;press enter twice when asked for a passphrase&amp;gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To use the key to login to &lt;code&gt;Ark&lt;/code&gt; remotely without manually entering a password you need to copy the public key from &lt;code&gt;Zim&lt;/code&gt; to &lt;code&gt;Ark&lt;/code&gt; using: &lt;pre lang=&#34;bash&#34;&gt;ssh-copy-id -i .ssh/id_rsa.pub backupuser@ark.example.com&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;If you don&amp;#8217;t have &lt;code&gt;ssh-copy-id&lt;/code&gt; on your system, get a new system. ðŸ˜‰ If thats not possible you can download the script with:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;wget -O ssh-copy-id http://cvsweb.mindrot.org/index.cgi/~checkout~/openssh/contrib/ssh-copy-id?rev=1.6;content-type=text%2Fplain &amp;#038;&amp;#038; chmod +x ssh-copy-id&lt;/pre&gt;

&lt;p&gt;Then retry the above command only you&amp;#8217;ll need to prepend a &amp;#8220;./&amp;#8221;:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;./ssh-copy-id -i .ssh/id_rsa.pub backupuser@ark.example.com&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify the key copied properly by attempting to login to &lt;code&gt;Ark&lt;/code&gt;. You should &lt;em&gt;not&lt;/em&gt; be prompted for a password: &lt;pre lang=&#34;bash&#34;&gt;ssh backupuser@ark.example.com&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logout of &lt;code&gt;Ark&lt;/code&gt;. The key is setup, so you&amp;#8217;re now ready to rsync files without having to manually enter a password.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test rsync by choosing a small file to backup and using: &lt;pre lang=&#34;bash&#34;&gt;rsync -tP /some/small/testfile backupuser@ark.example.com:/tmp&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;A nice little progress bar should be displayed as the file is transferred. Confirm that &amp;#8220;testfile&amp;#8221; is now in &lt;code&gt;/tmp&lt;/code&gt; on &lt;code&gt;Ark&lt;/code&gt;.&lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You&amp;#8217;re finally ready to do a real rsync like: &lt;pre lang=&#34;bash&#34;&gt;rsync -t /directory/to/backup/* backupuser@ark.example.com:/existing/backup/directory&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are several useful options for rsync. Check &lt;code&gt;man rsync&lt;/code&gt; to find out more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; &amp;#8212; preserve permissions (useful for backups, use -E if you only care about the executable bit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; &amp;#8212; recursively backup directories.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt; &amp;#8212; compressed uncompressed files&lt;/li&gt;
&lt;li&gt;And just FYI: &lt;code&gt;-t&lt;/code&gt; tells rsync to use the last modified timestamp to determine whether or not to transfer files. It makes rsync a &lt;em&gt;lot&lt;/em&gt; faster at determining whether or not files have changed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To schedule the backup to take place nightly at 1:13 AM edit your crontab using &lt;code&gt;crontab -e&lt;/code&gt; and insert the following line: &lt;pre lang=&#34;bash&#34;&gt;13 1 * * * rsync -qt /directory/to/backup/* backupuser@ark.example.com:/existing/backup/directory&lt;/pre&gt;&lt;/ol&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Caveats:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;These instructions will &lt;em&gt;push&lt;/em&gt; files from &lt;code&gt;Zim&lt;/code&gt; to &lt;code&gt;Ark&lt;/code&gt;. There&amp;#8217;s no reason why &lt;code&gt;Ark&lt;/code&gt; couldn&amp;#8217;t &lt;em&gt;pull&lt;/em&gt; files from &lt;code&gt;Zim&lt;/code&gt;. In fact, this is often &lt;strong&gt;more secure&lt;/strong&gt; if &lt;code&gt;Zim&lt;/code&gt; is a web server with a larger attack surface than &lt;code&gt;Ark&lt;/code&gt;. Mea culpa.&lt;/li&gt;
&lt;li&gt;If the IP address of &lt;code&gt;Ark&lt;/code&gt; is dynamic, use a service like [dyndns.com][4]. Otherwise SSH will give you errors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Major security warning:&lt;/em&gt; If someone breaks into &lt;code&gt;Zim&lt;/code&gt;, they can also delete all of your backups on &lt;code&gt;Ark&lt;/code&gt;. Never ever ever use the &lt;code&gt;root&lt;/code&gt; user for backups on &lt;code&gt;Ark&lt;/code&gt;. You can use the &lt;code&gt;root&lt;/code&gt; user on &lt;code&gt;Zim&lt;/code&gt; to send the backups, but its best to have a special backup user setup on &lt;code&gt;Ark&lt;/code&gt; to receive the backup.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[4]: &lt;a href=&#34;http://www.dyndns.com&#34;&gt;http://www.dyndns.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hostname Tab-Completion for OpenSSH</title>
      <link>/2008/01/30/hostname-tab-completion-for-openssh/</link>
      <pubDate>Wed, 30 Jan 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/01/30/hostname-tab-completion-for-openssh/</guid>
      <description>&lt;p&gt;I use &lt;a href=&#34;http://openssh.org/&#34;&gt;OpenSSH&lt;/a&gt; daily. In fact the only app I probably use more is &lt;a href=&#34;http://www.vim.org/&#34;&gt;vim&lt;/a&gt;. However, until yesterday I was typing out the full username and hostname when using ssh:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;ssh username@ridiculouslylong.domain.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ugh&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the same username makes life a bit simpler:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;ssh ridiculouslylong.domain.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meh&lt;/strong&gt;, better, but I&amp;#8217;m &lt;em&gt;really&lt;/em&gt; lazy!&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d heard about tab-completion for hostnames from various blogs, but never knew how to do it. I hopped into #debian and thirty seconds later someone had kindly told me about &lt;code&gt;&amp;lt;b&amp;gt;~/.ssh/config&amp;lt;/b&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Not only is any host listed in your &lt;code&gt;~/.ssh/config&lt;/code&gt; auto-completed on the command line by hitting tab, but you can also specify what username to connect as! So my .ssh/config file looks something like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Host host1.domain.com&amp;lt;br /&amp;gt;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;User randomuser&amp;lt;br /&amp;gt;
Host www.somewhereelse.com&amp;lt;br /&amp;gt;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;User someotheruser&amp;lt;br /&amp;gt;
Host mail.domain2.com&amp;lt;br /&amp;gt;
Host domain3.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now I can just type:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;ssh h&amp;lt;TAB&amp;gt;&amp;lt;ENTER&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to connect to &lt;em&gt;host1.domain.com&lt;/em&gt; as &lt;em&gt;randomuser&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beautiful.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out &lt;code&gt;man ssh_config&lt;/code&gt; for details and other options.&lt;/p&gt;

&lt;p&gt;Also, if you&amp;#8217;re not using &lt;a href=&#34;http://en.wikipedia.org/wiki/Ssh-agent&#34;&gt;ssh keys&lt;/a&gt; instead of passwords, you&amp;#8217;re doing too much work. [Seahorse][4] makes SSH keys simple.&lt;/p&gt;

&lt;p&gt;[4]: &lt;a href=&#34;http://www.gnome.org/projects/seahorse/&#34;&gt;http://www.gnome.org/projects/seahorse/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>