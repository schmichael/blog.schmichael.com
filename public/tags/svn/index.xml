<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Svn on schmichael&#39;s blog</title>
    <link>https://blog.schmichael.com/tags/svn/</link>
    <description>Recent content in Svn on schmichael&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 26 Feb 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.schmichael.com/tags/svn/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bazaar: DVCS for Dummies</title>
      <link>https://blog.schmichael.com/2009/02/26/bazaar-dvcs-for-dummies/</link>
      <pubDate>Thu, 26 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/02/26/bazaar-dvcs-for-dummies/</guid>
      <description>&lt;p&gt;I like &lt;a href=&#34;http://bazaar-vcs.org/&#34;&gt;Bazaar (bzr)&lt;/a&gt;. It doesn&amp;#8217;t make me popular in the &lt;a href=&#34;http://www.selenic.com/mercurial/&#34;&gt;Mercurial&lt;/a&gt;-centric Pythonosphere. It doesn&amp;#8217;t make me a 1337 ÃƒÂ¼ber hacker like &lt;a href=&#34;http://whygitisbetterthanx.com/&#34;&gt;git&lt;/a&gt; would.&lt;/p&gt;

&lt;p&gt;However, it does meet the most important criteria: &lt;strong&gt;It just works&lt;/strong&gt; &lt;em&gt;for me&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now for the big disclaimer: Most of the projects I use bzr to manage fall into 1 of 2 categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Projects with small teams (1-4 developers)&lt;/li&gt;
&lt;li&gt;Public projects where I just want to grab the source and maybe maintain some local patches&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If I needed to somehow manage a project with dozens or hundreds of contributors (like Gnome or the Linux Kernel), git would probably look a lot more appealing to me. After all, it was designed for large code bases with lots of contributors and branches.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve seen lots of &lt;a href=&#34;http://www.nardol.org/2009/2/19/git-basics-reversing-the-git-sucks-effect&#34;&gt;git cookbooks popping up lately&lt;/a&gt;, so I thought I&amp;#8217;d explain my bzr workflow for the 2 use cases I list above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Starting and sharing a project with a small team&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prerequisite: You&amp;#8217;ve created a directory with some code in it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Turn your source code directory into a bzr repository: &lt;pre lang=&#34;bash&#34;&gt;~/src/foo$ bzr init&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add you source files: &lt;pre lang=&#34;bash&#34;&gt;~/src/foo$ bzr add&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit: &lt;pre lang=&#34;bash&#34;&gt;~/src/foo$ bzr ci&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push my changes to a remote location* other team members can access: &lt;pre lang=&#34;bash&#34;&gt;~/src/foo$ bzr push &amp;ndash;remember sftp://some/file/server&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Done! My favorite part is that besides the &lt;code&gt;--remember&lt;/code&gt; option, bzr just does what you expect without any flags or configuring. The &lt;code&gt;--remember&lt;/code&gt; option simply tells bzr to use that location for future &lt;code&gt;push&lt;/code&gt; commands (so you can drop all the typing after &amp;#8220;push&amp;#8221;).&lt;/p&gt;

&lt;p&gt;For more information check out the &lt;a href=&#34;http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html#sharing-with-peers&#34;&gt;excellent bazaar documentation on sharing code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Getting the code for an open source project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately most big bzr-hosted projects are on Launchpad which makes for a pretty boring demonstration:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;~/src$ bzr branch lp:terminator # yawn
&lt;/pre&gt;

&lt;p&gt;To make matters worse, non-Launchpad hosted projects are nearly as dull:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;~/src$ bzr branch http://bzr.savannah.gnu.org/r/gnash/trunk
&lt;/pre&gt;

&lt;p&gt;In each case bzr will create a new directory for you using the last part of the source path (terminator &amp;amp; trunk respectively). You can optionally give it a second argument to put the branch in a different location. The destination can even be a remote server!&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;~/src$ bzr branch http://source/branch sftp://destination/branch
&lt;/pre&gt;

&lt;p&gt;Ok now I&amp;#8217;m just showing off. I&amp;#8217;ve never found a use for that feature. ðŸ˜‰ However, I do appreciate that a location is a location to bzr regardless of whether that location is the local filesystem or a remote server. It just works how you&amp;#8217;d expect it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html&#34;&gt;Chapters 4-6 of Bazaar&amp;#8217;s documentation&lt;/a&gt; give some excellent examples of various collaboration workflows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bonus Feature:&lt;/em&gt; Subversion mode!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So its not really &lt;em&gt;Subversion mode&lt;/em&gt;, but bzr does support pulling repositories via the &lt;code&gt;checkout&lt;/code&gt; command and updating your working copy from the remote repository via the &lt;code&gt;update&lt;/code&gt; command just like Subversion. As you would expect, the &lt;code&gt;commit&lt;/code&gt; now sends changes directly to the remote server.&lt;/p&gt;

&lt;p&gt;While I&amp;#8217;ve used this feature mainly to make transitioning to bzr easier for Subversion users, [Bazaar&amp;#8217;s documentation has some excellent techniques for making advanced workflows easier using checkouts][7].&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;** SSH Tips: &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;bzr+ssh is faster than plain old sftp but requires bzr to be installed on the server.&lt;/li&gt;
&lt;li&gt;Setup ssh connection multiplexing using &lt;code&gt;ControlMaster&lt;/code&gt; in &lt;code&gt;~/.ssh/config&lt;/code&gt; and leave an ssh session active to speed up bzr operations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[7]: &lt;a href=&#34;http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html#using-checkouts&#34;&gt;http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html#using-checkouts&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why not Subversion &#43; DVCS of Choice?</title>
      <link>https://blog.schmichael.com/2009/01/06/why-not-subversion-dvcs-of-choice/</link>
      <pubDate>Wed, 07 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/01/06/why-not-subversion-dvcs-of-choice/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://michael.susens-schurter.com/blog/2009/01/04/time-to-learn-git/&#34;&gt;A follow-up to my last post on DVCSes&amp;#8230;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://planet.gnome.org/&#34;&gt;Gnomers&lt;/a&gt; have been &lt;a href=&#34;http://wingolog.org/archives/2009/01/06/git-and-bzr&#34;&gt;discussing DVCSes a lot lately&lt;/a&gt;, and at least one seems to prefer &lt;a href=&#34;http://blogs.gnome.org/johncarr/2008/12/11/dvcs-for-gnome/&#34;&gt;bzr as the repository format and git as the protocol it speaks.&lt;/a&gt; &lt;small&gt;If this sounds like madness to you, you&amp;#8217;re not alone.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What I don&amp;#8217;t understand is why more people don&amp;#8217;t choose to keep Subversion as their repository and just use the $DVCS-svn of your choice?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Granted I&amp;#8217;ve only used &lt;a href=&#34;http://bazaar-vcs.org/BzrForeignBranches/Subversion&#34;&gt;bzr-svn&lt;/a&gt; a bit, but it worked quite well and seems to only be getting better. I hear [git-svn][6] is quite good as well (but &lt;abbrev title=&#34;if I remember correctly&#34;&gt;iirc&lt;/abbrev&gt; hg lags behind the competition).&lt;/p&gt;

&lt;p&gt;The benefits of this seem pretty nice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repository and Project management tools could get by with only first class Subversion support.&lt;/li&gt;
&lt;li&gt;Directing inexperienced users to download code would be standardized.&lt;/li&gt;
&lt;li&gt;Linux distributions wouldn&amp;#8217;t have to ship 5 different VCSes (cvs, svn, git, bzr, hg), although the VCSes don&amp;#8217;t take up much space.&lt;/li&gt;
&lt;li&gt;Developers could use whichever tool they preferred, publish branches to any one of the zillions of free hosts for their DVCS of choice, and get on with their life.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Answering my own question&amp;#8230;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The obvious counter argument is that in order to share code you either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;#8230;force everyone who cares to use your DVCS.&lt;/li&gt;
&lt;li&gt;&amp;#8230;or lose some of the benefits of your chosen DVCS and share code via a SVN branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets face it, both options are a pretty big hassle for &lt;em&gt;developers&lt;/em&gt;. Comprises always are.&lt;/p&gt;

&lt;p&gt;For smaller single projects the overhead associated with going this route probably isn&amp;#8217;t worth it. You&amp;#8217;ll probably either end up losing 75% of what makes a DVCS handy or just use SVN.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is Gnome not considering this option though?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This option seems ideal for projects like Gnome. Individual modules will probably adopt a preferred DVCS, and thats fine. None of them are so different that a competent developer couldn&amp;#8217;t yank some revisions from an unfamiliar DVCS.&lt;/p&gt;

&lt;p&gt;The project as a whole (and individual modules) would continue to remain uniformly easily available through a single svn checkout.&lt;/p&gt;

&lt;p&gt;At the very least isn&amp;#8217;t this better (at least saner) than bolting git onto bzr&amp;#8217;s repository format?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Audience Participation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not a Gnome developer though. Just a curious user. However, as a fellow developer I am left wondering: why isn&amp;#8217;t this a good option? Are $DVCS-svn connectors just not good enough? Are the comprises too great? Or the most likely: am I just missing some obvious showstopper?&lt;/p&gt;

&lt;p&gt;[6]: &lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-svn.html&#34;&gt;http://www.kernel.org/pub/software/scm/git/docs/git-svn.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPress Rocks at Updates</title>
      <link>https://blog.schmichael.com/2008/07/15/wordpress-rocks-at-updates/</link>
      <pubDate>Tue, 15 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2008/07/15/wordpress-rocks-at-updates/</guid>
      <description>&lt;p&gt;I feel I owe it to my friends who put up with my senseless Python fanboying to admit &lt;a href=&#34;http://wordpress.org&#34;&gt;WordPress&lt;/a&gt; is not only a great blog engine, but rocks at updates.&lt;/p&gt;

&lt;p&gt;I just upgraded from 2.5 to 2.6 by doing a simple &lt;code&gt;svn switch http://...&lt;/code&gt; and then logging into the web admin interface. It took about 30 seconds to complete.&lt;/p&gt;

&lt;p&gt;Now compare that to my last experience upgrading [Trac][2] from 0.10 to 0.11&amp;#8230; ugh.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;I love you Trac. Python just lacks an easy and efficient web app deployment method.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&#34;http://trac.edgewall.org/&#34;&gt;http://trac.edgewall.org/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>