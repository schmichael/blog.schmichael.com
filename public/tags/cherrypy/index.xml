<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cherrypy on </title>
    <link>/tags/cherrypy/</link>
    <description>Recent content in Cherrypy on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 18 Feb 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/cherrypy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>(Yet Another) Deploying Django with CherryPy Script</title>
      <link>/2009/02/18/deploying-django-with-cherrypy/</link>
      <pubDate>Wed, 18 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/02/18/deploying-django-with-cherrypy/</guid>
      <description>&lt;p&gt;Recently I deployed a &lt;a href=&#34;http://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; project on an OSX server. I foolishly thought this would be as easy as on Linux until I ran into the mess that is _x86&lt;em&gt;64&lt;/em&gt; Apache + &lt;a href=&#34;http://www.modwsgi.org/&#34;&gt;mod_wsgi&lt;/a&gt;* + Django + psycopg2 + &lt;em&gt;i386&lt;/em&gt; PostgreSQL. After wasting far too much time googling and recompiling various bits trying to get everything happy, I followed &lt;a href=&#34;http://www.eflorenzano.com/blog/post/hosting-django-site-pure-python/&#34;&gt;Eric Florenzano&amp;#8217;s post&lt;/a&gt; on deploying Django using &lt;a href=&#34;http://www.cherrypy.org/&#34;&gt;CherryPy&lt;/a&gt;&amp;#8216;s** [wsgiserver][5].&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s my lightly modified version of Eric&amp;#8217;s script:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import wsgiserver
import sys
import os
import django.core.handlers.wsgi

if __name__ == &#34;__main__&#34;:
    # Setup paths - a bit hackish, but works for me.
    # Assumes an absolute path is stored in &amp;lt;project&gt;.local_settings.ROOT
    sys.path.append(os.path.realpath(os.path.dirname(__file__)))
    from foo.local_settings import ROOT
    sys.path.append(ROOT)

    # Startup Django
    os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;foo.settings&#39;
    server = wsgiserver.CherryPyWSGIServer(
        (&#39;0.0.0.0&#39;, 8888),  # Use &#39;127.0.0.1&#39; to only bind to the localhost
        django.core.handlers.wsgi.WSGIHandler()
    )
    try:
        server.start()
    except KeyboardInterrupt:
        print &#39;Stopping&#39;
        server.stop()
&lt;/pre&gt;

&lt;p&gt;I also went with the latest stable version of CherryPy&amp;#8217;s wsgiserver instead of checking out trunk like Eric&amp;#8217;s post suggested.&lt;/p&gt;

&lt;p&gt;Then I just enabled &lt;code&gt;mod_proxy&lt;/code&gt; in Apache and setup the following VirtualHost:&lt;/p&gt;

&lt;pre lang=&#34;apache&#34;&gt;&amp;lt;Proxy *&gt;
    Order allow,deny
    Allow from all
&amp;lt;/Proxy&gt;
&amp;lt;Location &#34;/&#34;&gt;
    ProxyPass http://127.0.0.1:8888/
    ProxyPassReverse http://127.0.0.1:8888/
&amp;lt;/Location&gt;
&lt;/pre&gt;

&lt;p&gt;If you&amp;#8217;re cool you&amp;#8217;ll write some sort of system specific script to launch your web app on boot. In a pinch, you can always use a crontab:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;@reboot /usr/bin/python /path/to/app.py &amp;#038;
&lt;/pre&gt;

&lt;p&gt;YMMV ðŸ˜‰&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;br /&gt; * To mod_wsgi&amp;#8217;s credit, it took about 10 seconds to compile, generated a Universal binary, and in general Just Worked.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;
  ** I&amp;#8217;m already a CherryPy fan thanks to &lt;a href=&#34;http://www.dowski.com/&#34;&gt;dowski&lt;/a&gt;, so it wasn&amp;#8217;t a hard decision.&lt;br /&gt; &lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;http://www.cherrypy.org/wiki/CherryPyDownload#StandaloneWSGIserver&#34;&gt;http://www.cherrypy.org/wiki/CherryPyDownload#StandaloneWSGIserver&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Looking for CherryPy Case Studies</title>
      <link>/2008/03/18/looking-for-cherrypy-case-studies/</link>
      <pubDate>Tue, 18 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/03/18/looking-for-cherrypy-case-studies/</guid>
      <description>&lt;div style=&#34;float: right; padding: 0px 0px 5px 5px;&#34;&gt;
  &lt;a href=&#34;http://cherrypy.org&#34;&gt;&lt;img src=&#34;http://michael.susens-schurter.com/files/cplogo.jpg&#34; alt=&#34;CherryPy Logo&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;At the &lt;a href=&#34;http://cherrypy.org/&#34;&gt;CherryPy&lt;/a&gt; &lt;a href=&#34;http://groups.google.com/group/cherrypy-users/browse_thread/thread/7926752b6605d9fe&#34;&gt;BOF&lt;/a&gt;&lt;a href=&#34;http://cherrypy.org/&#34;&gt;1&lt;/a&gt; at &lt;a href=&#34;http://us.pycon.org/2008/about/&#34;&gt;Pycon in Chicago&lt;/a&gt; we discussed how people are using CherryPy in lots of different ways. We&amp;#8217;re afraid people aren&amp;#8217;t grokking how flexible CherryPy is just by briefly glancing at the web site and thought having some interesting case studies would be useful.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.cherrypy.org/wiki/SuccessStories&#34;&gt;wiki has a good start&lt;/a&gt;. However, its a bit out of date, and it&amp;#8217;d be nice to have some great Case Studies as well as a separate list of Projects using CherryPy.&lt;/p&gt;

&lt;p&gt;If your company deploys CherryPy or you&amp;#8217;ve used CherryPy for a client, I&amp;#8217;d love to hear the story. Here&amp;#8217;s a basic format you could follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Who&lt;/strong&gt; is using CherryPy: (your name)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Where&lt;/strong&gt; are you using Cherrypy?&lt;/p&gt;

&lt;p&gt;(Company or client name. You can of course remain anonymous)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt; do you do with CherryPy?&lt;/p&gt;

&lt;p&gt;(What&amp;#8217;s your project: a traditional public web site? internal web services?)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How&lt;/strong&gt; is CherryPy deployed?&lt;/p&gt;

&lt;p&gt;(Behind modproxy/modpython/modwsgi, on a cluster behind a load balancer, or is it your frontend HTTP server?)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How long&lt;/strong&gt; have you used CherryPy?&lt;/p&gt;

&lt;p&gt;(The &amp;#8220;when&amp;#8221; question)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt; did you choose CherryPy?&lt;/p&gt;

&lt;p&gt;(While &amp;#8220;because its the best&amp;#8221; is obviously the answer, a little more detail would be nice. ðŸ˜‰ )&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Feel free to include screenshots, links, code snippets, diagrams, etc, and &lt;strong&gt;&lt;a href=&#34;mailto:michael@susens-schurter.com&#34;&gt;e-mail me!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With [3.1 nearing release][6], it&amp;#8217;d be nice if we could launch an updated version of the web site at the same time, so your help is greatly appreciated!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;I also posted &lt;a href=&#34;http://groups.google.com/group/cherrypy-users/browse_thread/thread/1774049cc582a595?hl=en&#34;&gt;this over at the cherrypy-user mailing list&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://cherrypy.org/&#34;&gt;1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;if excuse not in [&#39;at funeral&#39;, &#39;giving birth&#39;, &#39;saving planet&#39;]:
    raise Exception(&#39;%s is no reason to miss the CherryPy BOF&#39; % excuse)&lt;/pre&gt;

&lt;p&gt;[6]: &lt;a href=&#34;http://download.cherrypy.org/cherrypy/3.1.0beta3/&#34;&gt;http://download.cherrypy.org/cherrypy/3.1.0beta3/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Permanent home for firewall-admin</title>
      <link>/2008/02/17/permanent-home-for-firewall-admin/</link>
      <pubDate>Sun, 17 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/02/17/permanent-home-for-firewall-admin/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://michael.susens-schurter.com/blog/2007/11/06/recipe-for-a-transparent-linux-firewall-and-cherrypy-control-panel/&#34;&gt;little recipe I posted&lt;/a&gt; for a dedicated Linux firewall with a CherryPy powered administrative interface finally has a [permanent home over at Google Code][2].&lt;/p&gt;

&lt;p&gt;Many thanks to Kyle Waremburg for creating the project page and helping me develop [firewall-admin][2]! I hope other people find it useful.&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&#34;http://code.google.com/p/firewall-admin/&#34;&gt;http://code.google.com/p/firewall-admin/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with Django and modwsgi</title>
      <link>/2008/02/05/fun-with-django-and-modwsgi/</link>
      <pubDate>Wed, 06 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/02/05/fun-with-django-and-modwsgi/</guid>
      <description>&lt;p&gt;Today I deployed my first &lt;a href=&#34;http://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; application for a client. Its yet-another-blog, so I&amp;#8217;ll refrain from posting the code and cluttering up the django-*blog* namespace on Google Code. Before you roll your eyes and complain about why I didn&amp;#8217;t use an existing solution, I think I have 2 somewhat valid reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client actually needed a _sub_set of the features most blogs offer, so I wouldn&amp;#8217;t really have anything to contribute back to an existing project.&lt;/li&gt;
&lt;li&gt;Blogs are one of the simplest content driven web applications in existence. Wikis are just a bit simpler perhaps. At any rate, creating a blog app is an excellent way to learn a framework.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Python Deployment Decisions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the past I&amp;#8217;ve used &lt;a href=&#34;http://michael.susens-schurter.com/blog/2007/08/16/deploying-cherrypy-on-apache-2-using-mod_proxy/&#34;&gt;CherryPy as my framework and a simple mod_proxy configuration to run the applications behind Apache&lt;/a&gt;. &lt;a href=&#34;http://www.djangoproject.com/documentation/django-admin/#runserver-optional-port-number-or-ipaddr-port&#34;&gt;Django considers its built-in web server a development tool only&lt;/a&gt;, so I figured it was time to explore the myriad of Python web app deployment alternatives: &lt;a href=&#34;http://www.modpython.org&#34;&gt;mod_python&lt;/a&gt;, &lt;a href=&#34;http://www.fastcgi.com/&#34;&gt;FastCGI&lt;/a&gt;, &lt;a href=&#34;http://www.modwsgi.org&#34;&gt;modwsgi&lt;/a&gt;. I&amp;#8217;m sure there are many more, but I&amp;#8217;d say those are the big 3.&lt;/p&gt;

&lt;p&gt;I had tried to deploy Python web applications on DreamHost using FastCGI before and entered &lt;a href=&#34;http://www.al3x.net/2008/01/shared-hosting-is-ghetto.html&#34;&gt;the hell that is deploying Python web apps on shared hosts&lt;/a&gt;. &lt;em&gt;So FastCGI wasn&amp;#8217;t my first choice this time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I had also tried mod_python for deploying &lt;a href=&#34;http://www.cherrypy.org/&#34;&gt;CherryPy&lt;/a&gt; apps on my &lt;a href=&#34;http://www.linode.com/&#34;&gt;Linode&lt;/a&gt; before and for whatever reason just found &lt;a href=&#34;http://httpd.apache.org/docs/2.2/mod/mod_proxy.html&#34;&gt;mod_proxy&lt;/a&gt; to be &lt;em&gt;much&lt;/em&gt; easier to setup and manage.&lt;/p&gt;

&lt;p&gt;I was kind of eager to try out modwsgi because its been getting a lot of attention lately, so I downloaded the source and compiled it on my &lt;a href=&#34;http://www.debian.org/&#34;&gt;Debian&lt;/a&gt; &lt;a href=&#34;http://www.debian.org/releases/etch/&#34;&gt;Etch&lt;/a&gt; server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying a Django App via modwsgi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;modwsgi was quite easy to setup as long as you follow the instructions in their wiki for Django integration. I was hit by &lt;a href=&#34;http://code.djangoproject.com/ticket/3762&#34;&gt;bug #3762&lt;/a&gt;, but the modwsgi documentation got me through it. &lt;small&gt;(For what its worth the attached wsgi.patch also worked, but I don&amp;#8217;t really want to run a patched version of Django.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;One big problem I ran into was &lt;a href=&#34;http://docs.python.org/lib/module-sqlite3.html&#34;&gt;sqlite3&lt;/a&gt; gave me &lt;code&gt;OperationalError: unable to open database file&lt;/code&gt; whenever I did anything that would write to the database. My database file was owned by &lt;code&gt;www-data&lt;/code&gt; (the Apache process owner) and had the permissions &lt;code&gt;664&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I switched to &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, ran [&lt;code&gt;syncdb&lt;/code&gt;][16], and everything worked beautifully.&lt;/p&gt;

&lt;p&gt;My wsgi script file /srv/spam/eggs/eggs.wsgi:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import os, sys
sys.path.append(&#39;/srv/spam&#39;)
sys.path.append(&#39;/srv/spam/eggs&#39;)
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;eggs.wsgi_settings&#39;

import django.core.handlers.wsgi

_application = django.core.handlers.wsgi.WSGIHandler()

def application(environ, start_response):
    environ[&#39;PATH_INFO&#39;] = environ[&#39;SCRIPT_NAME&#39;] + environ[&#39;PATH_INFO&#39;]
    return _application(environ, start_response)
&lt;/pre&gt;

&lt;p&gt;Note I use &lt;code&gt;wsgi_settings&lt;/code&gt; instead of my usual settings file. wsgi_settings just imports my main settings file and changes some to their production values.&lt;/p&gt;

&lt;p&gt;My Django application actually drops into the &lt;code&gt;/blog/&lt;/code&gt; and &lt;code&gt;/accounts/&lt;/code&gt; folders under a VirtualHost otherwise occupied by static files and some PHP scripts. modwsgi made this easy by putting this in my existing VirtualHost:&lt;/p&gt;

&lt;pre lang=&#34;apache&#34;&gt;WSGIScriptAliasMatch /(blog|accounts)/.* /srv/spam/eggs/eggs.wsgi

# A simple Alias directive handles my static files
Alias /static/ /srv/spam/eggs/static/
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bottom Line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I highly recommend using modwsgi for deploying Python web applications. sqlite3 may work for you. In my case its probably best I use PostgreSQL for a number of reasons.&lt;/p&gt;

&lt;p&gt;[16]: &lt;a href=&#34;http://www.djangoproject.com/documentation/django-admin/#syncdb&#34;&gt;http://www.djangoproject.com/documentation/django-admin/#syncdb&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with SQLObject and mxDateTime</title>
      <link>/2007/11/29/fun-with-sqlobject-and-mxdatetime/</link>
      <pubDate>Fri, 30 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>/2007/11/29/fun-with-sqlobject-and-mxdatetime/</guid>
      <description>&lt;p&gt;I&amp;#8217;m working on a small &lt;a href=&#34;http://cherrypy.org&#34;&gt;CherryPy&lt;/a&gt; web service that among other things saves timestamps to a database. The timestamp is in &lt;a href=&#34;http://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt; format (like &lt;code&gt;2007-07-31T16:05:00.000-05:00&lt;/code&gt;), and I needed to store the timezone.&lt;/p&gt;

&lt;p&gt;Luckily &lt;a href=&#34;http://www.egenix.com/products/python/mxBase/mxDateTime/&#34;&gt;mxDateTime&lt;/a&gt; and SQLObject&amp;#8217;s DateTimeCol both support full dates with times and time zone. Unfortunately its not immediately obvious from &lt;a href=&#34;http://sqlobject.org/SQLObject.html&#34;&gt;SQLObject&amp;#8217;s lackluster documentation&lt;/a&gt; how to use mxDateTime instead of Python&amp;#8217;s built-in datetime.&lt;/p&gt;

&lt;p&gt;A little searching brought me to a mailing list post about [how to use mxDateTime by default in SQLObject][5]. (I don&amp;#8217;t know why the sample code includes the conditional as I would think you&amp;#8217;d want your code to outright fail if you&amp;#8217;re unable to use the datetime library you expect.)&lt;/p&gt;

&lt;p&gt;So my model&amp;#8217;s code looks something like this:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;from sqlobject import *
from sqlobject import col

col.default_datetime_implementation = MXDATETIME_IMPLEMENTATION

class Foo(SQLObject):
    timestamp = DateTimeCol(default=DateTimeCol.now)
&lt;/pre&gt;

&lt;p&gt;Then my parsing code looks something like this:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import model
from mx import DateTime

timestamp = &#39;2007-07-31T16:05:00.000-05:00&#39;
bar = model.Foo(timestamp=DateTime.DateTimeFrom(timestamp))
print &#39;UTC Timestamp:&#39;, bar.timestamp
print &#39;Local Timestamp:&#39;, bar.timestamp.localtime()
&lt;/pre&gt;

&lt;p&gt;Basically once you use the magic line &lt;code&gt;col.default_datetime_implementation = MXDATETIME_IMPLEMENTATION&lt;/code&gt;, everything Just Works.&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;http://pythonpaste.org/archives/message/20070410.064412.fa195fb7.en.html&#34;&gt;http://pythonpaste.org/archives/message/20070410.064412.fa195fb7.en.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recipe for a Transparent Linux Firewall and CherryPy Control Panel</title>
      <link>/2007/11/06/recipe-for-a-transparent-linux-firewall-and-cherrypy-control-panel/</link>
      <pubDate>Tue, 06 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>/2007/11/06/recipe-for-a-transparent-linux-firewall-and-cherrypy-control-panel/</guid>
      <description>&lt;div style=&#34;float: right; padding: 10px;&#34;&gt;
  &lt;a href=&#34;http://michael.susens-schurter.com/files/firewalladmin.png&#34;&gt;&lt;img alt=&#34;firewalladmin screenshot&#34; src=&#34;http://michael.susens-schurter.com/files/firewalladmin-small.png&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;At my previous job I built a transparent firewall with the help of a student. He hacked up some iptables scripts, and I hacked up a CherryPy application to control the firewall. It turned out to be pretty handy, so I&amp;#8217;m finally getting around to posting it somewhere&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recipe:&lt;/strong&gt; A transparent firewall to block certain IP addresses and a nice web based control panel to edit the blacklist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ingredients:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Old computer (preferably a PIII) with 3 NICs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.debian.org/releases/etch/&#34;&gt;Debian Etch&lt;/a&gt; (or your Linux flavor of choice)&lt;/li&gt;
&lt;li&gt;Packages: &lt;a href=&#34;http://packages.debian.org/etch/iptables&#34;&gt;iptables&lt;/a&gt;, &lt;a href=&#34;http://packages.debian.org/etch/bridge-utils&#34;&gt;bridge-utils&lt;/a&gt;, &lt;a href=&#34;http://packages.debian.org/etch/python/python&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;http://packages.debian.org/etch/python/python-setuptools&#34;&gt;setuptools&lt;/a&gt;, CherryPy 3 (use easy_install), Genshi (use easy_install), &lt;a href=&#34;http://packages.debian.org/etch/python/python-adns&#34;&gt;Python-ADNS&lt;/a&gt;, &lt;a href=&#34;http://packages.debian.org/etch/python/python-sqlobject&#34;&gt;SQLObject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://michael.susens-schurter.com/code/firewall-admin.tar.gz&#34;&gt;firewall-admin.tar.gz&lt;/a&gt; &amp;#8211; my exceedingly creatively named firewall administration CherryPy web app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Directions:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extract firewall-admin.tar.gz and change to the base directory. By default its setup to be in /srv/firewall-admin&lt;/li&gt;
&lt;li&gt;If you didn&amp;#8217;t extract to &lt;code&gt;/srv/firewall-admin&lt;/code&gt;, edit etc/rc.local and &lt;em&gt;basedir&lt;/em&gt; in &lt;code&gt;firewalladmin.config&lt;/code&gt; to reflect the current directory.&lt;/li&gt;
&lt;li&gt;By default &lt;code&gt;firewalladmin/lib/bridge.py&lt;/code&gt; [bridges][9] &lt;em&gt;eth1&lt;/em&gt; and &lt;em&gt;eth2&lt;/em&gt;, and &lt;em&gt;eth0&lt;/em&gt; should be attached to your LAN to access SSH and the web control panel.&lt;/li&gt;
&lt;li&gt;Edit firewalladmin.config to run on the IP address assigned to your administrative NIC and remember what port its set to run on.&lt;/li&gt;
&lt;li&gt;Add the commands from &lt;code&gt;etc/rc.local&lt;/code&gt; to your system&amp;#8217;s existing &lt;code&gt;/etc/rc.local&lt;/code&gt; script. This will start the transparent firewall and web control panel on boot.&lt;/li&gt;
&lt;li&gt;Next you&amp;#8217;ll need to setup the database. Edit line 28 in &lt;code&gt;firewalladmin/model.py&lt;/code&gt; to set a default password and then run &lt;code&gt;createdb.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You&amp;#8217;re now ready to start the firewall and control panel simply by running &lt;code&gt;sudo etc/rc.local&lt;/code&gt; (see &lt;em&gt;Caveats&lt;/em&gt; below). You can always test out just the web interface by running &lt;code&gt;start-firewalladmin.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Browse to the web interface using the IP and Port setup in step 4, login using the username and password setup in step 6, and start configuring your transparent firewall!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The firewall allows creating multiple blacklists (aka Categories) which can be edited/paused/deleted individually. It has has &lt;em&gt;allow lists&lt;/em&gt; (aka Whitelists) which can be used to allow specific internal IPs access to specific sites that might otherwise be blocked by a blacklist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; When a user visits a blocked site they are redirected to the IP and Port specified on line 10 of &lt;code&gt;firewalladmin/lib/iptables.py&lt;/code&gt;. We setup Apache to listen on that port and serve up a generic &lt;em&gt;You&amp;#8217;ve been blocked&lt;/em&gt; page, but you could be even more clever. You&amp;#8217;ll need a &lt;code&gt;.htaccess&lt;/code&gt; file like the following to properly map all blocked traffic to your block page:&lt;/p&gt;

&lt;pre lang=&#34;htaccess&#34;&gt;RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.html [L,QSA]
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Caveats&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All scripts as well as the web control panel are &lt;strong&gt;executed as root&lt;/strong&gt;. This setup should only be run on dedicated hardware and not on a server with other services.&lt;/li&gt;
&lt;li&gt;No test suite. Mea culpa.&lt;/li&gt;
&lt;li&gt;Little to no error handling. You&amp;#8217;ve been warned. ðŸ˜‰&lt;/li&gt;
&lt;li&gt;Basically this is a quick hack and should not be used in the same way you use tested and maintained software. YMMV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This little setup has proved very useful at the school for augmenting their existing content filtering system, and all web traffic passes through it without trouble. An old PIII can run a 3,000 domain blacklist at wirespeed on a 10 Mbps link while using less than 10% of the CPU.&lt;/p&gt;

&lt;p&gt;[9]: &lt;a href=&#34;http://www.linux-foundation.org/en/Net:Bridge&#34;&gt;http://www.linux-foundation.org/en/Net:Bridge&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Every 3rd Safari Upload Fails</title>
      <link>/2007/10/17/every-3rd-safari-upload-fails/</link>
      <pubDate>Wed, 17 Oct 2007 00:00:00 +0000</pubDate>
      
      <guid>/2007/10/17/every-3rd-safari-upload-fails/</guid>
      <description>&lt;div style=&#34;float: left;&#34;&gt;
  &lt;a href=&#34;http://cherrypy.org&#34;&gt;&lt;img src=&#34;http://michael.susens-schurter.com/files/cplogo.jpg&#34; alt=&#34;CherryPy Logo&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Recently I built a small &lt;a href=&#34;http://cherrypy.org/&#34;&gt;CherryPy&lt;/a&gt; application to allow users to upload photos to a gallery. The application is pretty trivial and just uses the &lt;a href=&#34;http://www.pythonware.com/products/pil/&#34;&gt;Python Imaging Library&lt;/a&gt; to resize the photos and &lt;a href=&#34;http://genshi.edgewall.org/&#34;&gt;Genshi&lt;/a&gt; to output some XML which is used by a Flash gallery.&lt;/p&gt;

&lt;p&gt;However, after deployment a user complained every 3rd upload would fail. She was using Safari on Mac OSX, and I couldn&amp;#8217;t duplicate the error in Firefox. Luckily she didn&amp;#8217;t mind switching to Firefox and it fixed her problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Working with Firefox has helped tremendously! I&amp;#8217;ll only use it from now on, and we should be fine with uploads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Has anyone else seen this? I [deployed CherryPy behind Apache 2.2 using mod_proxy][4], and Apache logs the following error when an upload fails (IPs changed):&lt;/p&gt;

&lt;pre&gt;[error] proxy: client 000.000.000.000 given Content-Length did not match number of body bytes read
[error] (70014)End of file found: proxy: pass request body failed to 127.0.0.1:9595 (127.0.0.1) from 00.000.000.001 ()&lt;/pre&gt;

&lt;p&gt;So it appears Safari just messes up the Content-Length. All CherryPy would receive is a POST with no data.&lt;/p&gt;

&lt;p&gt;[4]: &lt;a href=&#34;http://michael.susens-schurter.com/blog/2007/08/16/deploying-cherrypy-on-apache-2-using-mod_proxy/&#34;&gt;http://michael.susens-schurter.com/blog/2007/08/16/deploying-cherrypy-on-apache-2-using-mod_proxy/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>