<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xml on schmichael&#39;s blog</title>
    <link>https://blog.schmichael.com/tags/xml/</link>
    <description>Recent content in Xml on schmichael&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 14 Oct 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.schmichael.com/tags/xml/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>lxml vs. ElementTree</title>
      <link>https://blog.schmichael.com/2009/10/14/lxml-vs-elementtree/</link>
      <pubDate>Wed, 14 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/10/14/lxml-vs-elementtree/</guid>
      <description>&lt;p&gt;While lxml has some &lt;a href=&#34;http://codespeak.net/lxml/performance.html&#34;&gt;excellent benchmarks about the speed of lxml.etree vs. ElementTree&lt;/a&gt;, I wanted to run some tests that were as close as possible to my own use case (fairly simple multi-megabyte XML files).&lt;/p&gt;

&lt;p&gt;Here are the results of my little test script [lxml-v-etree.py]&lt;a href=&#34;times are in milliseconds&#34;&gt;2&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;name           generate | tostring | total | write | parse | find | total
------------------------+----------+-------+-------+-------+------+------
xml.cElementTree    132 |   2430   |  2562 |  2433 |   158 |   58 |   216
xml.cElementTree    112 |   2384   |  2497 |  2387 |   158 |   25 |   183
xml.cElementTree    113 |   2393   |  2507 |  2396 |   161 |   25 |   187
xml.ElementTree     591 |   2571   |  3163 |  2574 |  3613 |   25 |  3638
xml.ElementTree     619 |   2567   |  3187 |  2570 |  3589 |   55 |  3644
xml.ElementTree     609 |   2578   |  3188 |  2581 |  3564 |   55 |  3619
lxml                333 |     75   |   409 |    82 |   200 |    0 |   201
lxml                355 |     93   |   448 |    95 |   182 |   32 |   214
lxml                310 |     94   |   404 |    96 |   156 |   56 |   213
------------------------+----------+-------+-------+-------+------+------
name           generate | tostring | total | write | parse | find | total
------------------------+----------+-------+-------+-------+------+------
&lt;/pre&gt;

&lt;p&gt;Note that the first &amp;#8220;total&amp;#8221; is &amp;#8220;generate + tostring&amp;#8221; while the second &amp;#8220;total&amp;#8221; is for the 2 parsing related tests (previous 2 columns summed).&lt;/p&gt;

&lt;p&gt;My parsing tests are basically &amp;#8220;etree.parse&amp;#8221; and then running &amp;#8220;Element.getchildren()&amp;#8221; 3 times, which is ridiculously simplistic and should probably be ignored. My writing tests are far more thorough/realistic.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m running Python 2.6.2 with lxml 2.1.5 and libxml2 2.6.32 on Ubuntu 9.04 x86_64.&lt;/p&gt;

&lt;p&gt;[2]: /files/lxml-v-etree.py-remove-me&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with SQLObject and mxDateTime</title>
      <link>https://blog.schmichael.com/2007/11/29/fun-with-sqlobject-and-mxdatetime/</link>
      <pubDate>Fri, 30 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2007/11/29/fun-with-sqlobject-and-mxdatetime/</guid>
      <description>&lt;p&gt;I&amp;#8217;m working on a small &lt;a href=&#34;http://cherrypy.org&#34;&gt;CherryPy&lt;/a&gt; web service that among other things saves timestamps to a database. The timestamp is in &lt;a href=&#34;http://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt; format (like &lt;code&gt;2007-07-31T16:05:00.000-05:00&lt;/code&gt;), and I needed to store the timezone.&lt;/p&gt;

&lt;p&gt;Luckily &lt;a href=&#34;http://www.egenix.com/products/python/mxBase/mxDateTime/&#34;&gt;mxDateTime&lt;/a&gt; and SQLObject&amp;#8217;s DateTimeCol both support full dates with times and time zone. Unfortunately its not immediately obvious from &lt;a href=&#34;http://sqlobject.org/SQLObject.html&#34;&gt;SQLObject&amp;#8217;s lackluster documentation&lt;/a&gt; how to use mxDateTime instead of Python&amp;#8217;s built-in datetime.&lt;/p&gt;

&lt;p&gt;A little searching brought me to a mailing list post about [how to use mxDateTime by default in SQLObject][5]. (I don&amp;#8217;t know why the sample code includes the conditional as I would think you&amp;#8217;d want your code to outright fail if you&amp;#8217;re unable to use the datetime library you expect.)&lt;/p&gt;

&lt;p&gt;So my model&amp;#8217;s code looks something like this:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;from sqlobject import *
from sqlobject import col

col.default_datetime_implementation = MXDATETIME_IMPLEMENTATION

class Foo(SQLObject):
    timestamp = DateTimeCol(default=DateTimeCol.now)
&lt;/pre&gt;

&lt;p&gt;Then my parsing code looks something like this:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import model
from mx import DateTime

timestamp = &#39;2007-07-31T16:05:00.000-05:00&#39;
bar = model.Foo(timestamp=DateTime.DateTimeFrom(timestamp))
print &#39;UTC Timestamp:&#39;, bar.timestamp
print &#39;Local Timestamp:&#39;, bar.timestamp.localtime()
&lt;/pre&gt;

&lt;p&gt;Basically once you use the magic line &lt;code&gt;col.default_datetime_implementation = MXDATETIME_IMPLEMENTATION&lt;/code&gt;, everything Just Works.&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;http://pythonpaste.org/archives/message/20070410.064412.fa195fb7.en.html&#34;&gt;http://pythonpaste.org/archives/message/20070410.064412.fa195fb7.en.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>