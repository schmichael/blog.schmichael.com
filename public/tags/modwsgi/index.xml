<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modwsgi on schmichael&#39;s blog</title>
    <link>https://blog.schmichael.com/tags/modwsgi/</link>
    <description>Recent content in Modwsgi on schmichael&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 06 Feb 2008 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.schmichael.com/tags/modwsgi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fun with Django and modwsgi</title>
      <link>https://blog.schmichael.com/2008/02/05/fun-with-django-and-modwsgi/</link>
      <pubDate>Wed, 06 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2008/02/05/fun-with-django-and-modwsgi/</guid>
      <description>&lt;p&gt;Today I deployed my first &lt;a href=&#34;http://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; application for a client. Its yet-another-blog, so I&amp;#8217;ll refrain from posting the code and cluttering up the django-*blog* namespace on Google Code. Before you roll your eyes and complain about why I didn&amp;#8217;t use an existing solution, I think I have 2 somewhat valid reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client actually needed a _sub_set of the features most blogs offer, so I wouldn&amp;#8217;t really have anything to contribute back to an existing project.&lt;/li&gt;
&lt;li&gt;Blogs are one of the simplest content driven web applications in existence. Wikis are just a bit simpler perhaps. At any rate, creating a blog app is an excellent way to learn a framework.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Python Deployment Decisions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the past I&amp;#8217;ve used &lt;a href=&#34;http://michael.susens-schurter.com/blog/2007/08/16/deploying-cherrypy-on-apache-2-using-mod_proxy/&#34;&gt;CherryPy as my framework and a simple mod_proxy configuration to run the applications behind Apache&lt;/a&gt;. &lt;a href=&#34;http://www.djangoproject.com/documentation/django-admin/#runserver-optional-port-number-or-ipaddr-port&#34;&gt;Django considers its built-in web server a development tool only&lt;/a&gt;, so I figured it was time to explore the myriad of Python web app deployment alternatives: &lt;a href=&#34;http://www.modpython.org&#34;&gt;mod_python&lt;/a&gt;, &lt;a href=&#34;http://www.fastcgi.com/&#34;&gt;FastCGI&lt;/a&gt;, &lt;a href=&#34;http://www.modwsgi.org&#34;&gt;modwsgi&lt;/a&gt;. I&amp;#8217;m sure there are many more, but I&amp;#8217;d say those are the big 3.&lt;/p&gt;

&lt;p&gt;I had tried to deploy Python web applications on DreamHost using FastCGI before and entered &lt;a href=&#34;http://www.al3x.net/2008/01/shared-hosting-is-ghetto.html&#34;&gt;the hell that is deploying Python web apps on shared hosts&lt;/a&gt;. &lt;em&gt;So FastCGI wasn&amp;#8217;t my first choice this time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I had also tried mod_python for deploying &lt;a href=&#34;http://www.cherrypy.org/&#34;&gt;CherryPy&lt;/a&gt; apps on my &lt;a href=&#34;http://www.linode.com/&#34;&gt;Linode&lt;/a&gt; before and for whatever reason just found &lt;a href=&#34;http://httpd.apache.org/docs/2.2/mod/mod_proxy.html&#34;&gt;mod_proxy&lt;/a&gt; to be &lt;em&gt;much&lt;/em&gt; easier to setup and manage.&lt;/p&gt;

&lt;p&gt;I was kind of eager to try out modwsgi because its been getting a lot of attention lately, so I downloaded the source and compiled it on my &lt;a href=&#34;http://www.debian.org/&#34;&gt;Debian&lt;/a&gt; &lt;a href=&#34;http://www.debian.org/releases/etch/&#34;&gt;Etch&lt;/a&gt; server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying a Django App via modwsgi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;modwsgi was quite easy to setup as long as you follow the instructions in their wiki for Django integration. I was hit by &lt;a href=&#34;http://code.djangoproject.com/ticket/3762&#34;&gt;bug #3762&lt;/a&gt;, but the modwsgi documentation got me through it. &lt;small&gt;(For what its worth the attached wsgi.patch also worked, but I don&amp;#8217;t really want to run a patched version of Django.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;One big problem I ran into was &lt;a href=&#34;http://docs.python.org/lib/module-sqlite3.html&#34;&gt;sqlite3&lt;/a&gt; gave me &lt;code&gt;OperationalError: unable to open database file&lt;/code&gt; whenever I did anything that would write to the database. My database file was owned by &lt;code&gt;www-data&lt;/code&gt; (the Apache process owner) and had the permissions &lt;code&gt;664&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I switched to &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, ran [&lt;code&gt;syncdb&lt;/code&gt;][16], and everything worked beautifully.&lt;/p&gt;

&lt;p&gt;My wsgi script file /srv/spam/eggs/eggs.wsgi:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import os, sys
sys.path.append(&#39;/srv/spam&#39;)
sys.path.append(&#39;/srv/spam/eggs&#39;)
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;eggs.wsgi_settings&#39;

import django.core.handlers.wsgi

_application = django.core.handlers.wsgi.WSGIHandler()

def application(environ, start_response):
    environ[&#39;PATH_INFO&#39;] = environ[&#39;SCRIPT_NAME&#39;] + environ[&#39;PATH_INFO&#39;]
    return _application(environ, start_response)
&lt;/pre&gt;

&lt;p&gt;Note I use &lt;code&gt;wsgi_settings&lt;/code&gt; instead of my usual settings file. wsgi_settings just imports my main settings file and changes some to their production values.&lt;/p&gt;

&lt;p&gt;My Django application actually drops into the &lt;code&gt;/blog/&lt;/code&gt; and &lt;code&gt;/accounts/&lt;/code&gt; folders under a VirtualHost otherwise occupied by static files and some PHP scripts. modwsgi made this easy by putting this in my existing VirtualHost:&lt;/p&gt;

&lt;pre lang=&#34;apache&#34;&gt;WSGIScriptAliasMatch /(blog|accounts)/.* /srv/spam/eggs/eggs.wsgi

# A simple Alias directive handles my static files
Alias /static/ /srv/spam/eggs/static/
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bottom Line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I highly recommend using modwsgi for deploying Python web applications. sqlite3 may work for you. In my case its probably best I use PostgreSQL for a number of reasons.&lt;/p&gt;

&lt;p&gt;[16]: &lt;a href=&#34;http://www.djangoproject.com/documentation/django-admin/#syncdb&#34;&gt;http://www.djangoproject.com/documentation/django-admin/#syncdb&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>