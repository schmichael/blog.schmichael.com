<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sqlobject on </title>
    <link>/tags/sqlobject/</link>
    <description>Recent content in Sqlobject on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Nov 2007 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/sqlobject/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fun with SQLObject and mxDateTime</title>
      <link>/2007/11/29/fun-with-sqlobject-and-mxdatetime/</link>
      <pubDate>Fri, 30 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>/2007/11/29/fun-with-sqlobject-and-mxdatetime/</guid>
      <description>&lt;p&gt;I&amp;#8217;m working on a small &lt;a href=&#34;http://cherrypy.org&#34;&gt;CherryPy&lt;/a&gt; web service that among other things saves timestamps to a database. The timestamp is in &lt;a href=&#34;http://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt; format (like &lt;code&gt;2007-07-31T16:05:00.000-05:00&lt;/code&gt;), and I needed to store the timezone.&lt;/p&gt;

&lt;p&gt;Luckily &lt;a href=&#34;http://www.egenix.com/products/python/mxBase/mxDateTime/&#34;&gt;mxDateTime&lt;/a&gt; and SQLObject&amp;#8217;s DateTimeCol both support full dates with times and time zone. Unfortunately its not immediately obvious from &lt;a href=&#34;http://sqlobject.org/SQLObject.html&#34;&gt;SQLObject&amp;#8217;s lackluster documentation&lt;/a&gt; how to use mxDateTime instead of Python&amp;#8217;s built-in datetime.&lt;/p&gt;

&lt;p&gt;A little searching brought me to a mailing list post about [how to use mxDateTime by default in SQLObject][5]. (I don&amp;#8217;t know why the sample code includes the conditional as I would think you&amp;#8217;d want your code to outright fail if you&amp;#8217;re unable to use the datetime library you expect.)&lt;/p&gt;

&lt;p&gt;So my model&amp;#8217;s code looks something like this:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;from sqlobject import *
from sqlobject import col

col.default_datetime_implementation = MXDATETIME_IMPLEMENTATION

class Foo(SQLObject):
    timestamp = DateTimeCol(default=DateTimeCol.now)
&lt;/pre&gt;

&lt;p&gt;Then my parsing code looks something like this:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import model
from mx import DateTime

timestamp = &#39;2007-07-31T16:05:00.000-05:00&#39;
bar = model.Foo(timestamp=DateTime.DateTimeFrom(timestamp))
print &#39;UTC Timestamp:&#39;, bar.timestamp
print &#39;Local Timestamp:&#39;, bar.timestamp.localtime()
&lt;/pre&gt;

&lt;p&gt;Basically once you use the magic line &lt;code&gt;col.default_datetime_implementation = MXDATETIME_IMPLEMENTATION&lt;/code&gt;, everything Just Works.&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;http://pythonpaste.org/archives/message/20070410.064412.fa195fb7.en.html&#34;&gt;http://pythonpaste.org/archives/message/20070410.064412.fa195fb7.en.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>