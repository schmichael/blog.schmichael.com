<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gnu/Linux on schmichael&#39;s blog</title>
    <link>https://blog.schmichael.com/categories/gnu/linux/</link>
    <description>Recent content in Gnu/Linux on schmichael&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 29 May 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.schmichael.com/categories/gnu/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building Python 2.6.8 on Ubuntu 12.04</title>
      <link>https://blog.schmichael.com/2012/05/29/building-python-2-6-8-on-ubuntu-12-04/</link>
      <pubDate>Tue, 29 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2012/05/29/building-python-2-6-8-on-ubuntu-12-04/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update 2012-06-01:&lt;/strong&gt; Looks like &lt;a href=&#34;https://github.com/saghul/pythonz&#34;&gt;pythonz&lt;/a&gt; is an easier way to install Python 2.6.8 (and all other Pythons) on Ubuntu 12.04.&lt;/p&gt;

&lt;p&gt;Ubuntu 12.04 builds OpenSSL without SSLv2. Python 2.6.8 expects OpenSSL to be built with SSLv2.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bugs.python.org/issue12012&#34;&gt;This is a bug that has been fixed in Python 2.7+&lt;/a&gt;, but it wasn&amp;#8217;t backported for Python 2.6.&lt;/p&gt;

&lt;p&gt;So if you build your own Python 2.6 binaries on Ubuntu 12.04 you&amp;#8217;ll see errors like this when attempting to use anything SSL related:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*** WARNING: renaming &amp;quot;_ssl&amp;quot; since importing it failed: build/lib.linux-x86_64-2.6/_ssl.so: undefined symbol: SSLv2_method&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some of us still need Python 2.6, so &lt;a href=&#34;https://bitbucket.org/schmichael/cpython-v2.6.8-nosslv2/src/d77684a8fdd5&#34;&gt;I forked Python 2.6.8 and removed SSLv2 support&lt;/a&gt;. Tests pass and SSL works.&lt;/p&gt;

&lt;p&gt;You can also just grab the diff below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; M2Crypto requires patching as well:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2:&lt;/strong&gt; If you trust me and use 64bit Ubuntu 12.04 you can download a pre-built [python-2.6.8~nosslv2][4] tarball from me. Includes distribute and pip pre-installed.&lt;/p&gt;

&lt;p&gt;[4]: &lt;a href=&#34;http://schmichael.com/files/python-2.6.8~nosslv2.tar.gz&#34;&gt;http://schmichael.com/files/python-2.6.8~nosslv2.tar.gz&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sharing Python data between processes using mmap</title>
      <link>https://blog.schmichael.com/2011/05/15/sharing-python-data-between-processes-using-mmap/</link>
      <pubDate>Mon, 16 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2011/05/15/sharing-python-data-between-processes-using-mmap/</guid>
      <description>&lt;p&gt;I&amp;#8217;ve been toying with an idea of exposing statistics for a Python application via shared memory to keep the performance impact on the application as low as possible. The goal being an application could passively expose a number of metrics that could either be periodically polled via &lt;a href=&#34;http://munin-monitoring.org/&#34;&gt;munin&lt;/a&gt;/&lt;a href=&#34;http://www.icinga.org/&#34;&gt;Icinga&lt;/a&gt;/etc plugins or interactive tools when diagnosing issues on a system.&lt;/p&gt;

&lt;p&gt;But first things first: I need to put data into &lt;a href=&#34;http://en.wikipedia.org/wiki/Shared_memory&#34;&gt;shared memory&lt;/a&gt; from Python. &lt;a href=&#34;http://en.wikipedia.org/wiki/Mmap&#34;&gt;mmap&lt;/a&gt; is an excellent widely-implemented POSIX system call for creating a shared memory space backed by an on-disk file.&lt;/p&gt;

&lt;p&gt;Usually in the UNIX world you have 2 ways of accessing/manipulating data: memory addresses or streams (files). Manipulating data via memory addresses means &lt;a href=&#34;http://en.wikipedia.org/wiki/Pointer_%28computing%29&#34;&gt;pointers&lt;/a&gt;, offsets, &lt;a href=&#34;http://en.wikipedia.org/wiki/Malloc&#34;&gt;malloc/free&lt;/a&gt;, etc. Stream interfaces manipulate data via &lt;a href=&#34;http://en.wikipedia.org/wiki/System_call&#34;&gt;read/write/seek system calls&lt;/a&gt; for files and &lt;a href=&#34;http://en.wikipedia.org/wiki/Berkeley_sockets&#34;&gt;send/recv/etc for sockets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;mmap gives you both interfaces. A memory mapped file can be manipulated via read/write/seek or by directly accessing its mapped memory region. The advantage of the latter is that this memory region is in userspace &amp;#8212; meaning you can manipulate a file without incurring the overhead of write system calls for every manipulation.&lt;/p&gt;

&lt;p&gt;Anyway, enough exposition, let&amp;#8217;s see some code. &lt;small&gt;(Despite mmap&amp;#8217;s nice featureset, I&amp;#8217;m only using it as a simple memory sharing mechanism anyway.)&lt;/small&gt; The following code shares a tiny bit of data between 2 Python processes using the excellent &lt;a href=&#34;http://docs.python.org/library/mmap&#34;&gt;mmap module in the stdlib&lt;/a&gt;. &lt;code&gt;a.py&lt;/code&gt; writes to the memory mapped region, and &lt;code&gt;b.py&lt;/code&gt; reads the data out. [ctypes][10] allows for an easy way to create values in a memory mapped region and manipulate them like &amp;#8220;normal&amp;#8221; Python objects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;These code samples were written using Python 2.7 on Linux. They should work fine on any POSIX system, but Windows users will have to change the mmap calls to match the Windows API.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a.py&lt;/strong&gt;&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;#!/usr/bin/env python
import ctypes
import mmap
import os
import struct


def main():
    # Create new empty file to back memory map on disk
    fd = os.open(&#39;/tmp/mmaptest&#39;, os.O_CREAT | os.O_TRUNC | os.O_RDWR)

    # Zero out the file to insure it&#39;s the right size
    assert os.write(fd, &#39;\x00&#39; * mmap.PAGESIZE) == mmap.PAGESIZE

    # Create the mmap instace with the following params:
    # fd: File descriptor which backs the mapping or -1 for anonymous mapping
    # length: Must in multiples of PAGESIZE (usually 4 KB)
    # flags: MAP_SHARED means other processes can share this mmap
    # prot: PROT_WRITE means this process can write to this mmap
    buf = mmap.mmap(fd, mmap.PAGESIZE, mmap.MAP_SHARED, mmap.PROT_WRITE)

    # Now create an int in the memory mapping
    i = ctypes.c_int.from_buffer(buf)

    # Set a value
    i.value = 10

    # And manipulate it for kicks
    i.value += 1
    
    assert i.value == 11

    # Before we create a new value, we need to find the offset of the next free
    # memory address within the mmap
    offset = struct.calcsize(i._type_)

    # The offset should be uninitialized (&#39;\x00&#39;)
    assert buf[offset] == &#39;\x00&#39;

    # Now ceate a string containing &#39;foo&#39; by first creating a c_char array
    s_type = ctypes.c_char * len(&#39;foo&#39;)

    # Now create the ctypes instance
    s = s_type.from_buffer(buf, offset)

    # And finally set it
    s.raw = &#39;foo&#39;

    print &#39;First 10 bytes of memory mapping: %r&#39; % buf[:10]
    raw_input(&#39;Now run b.py and press ENTER&#39;)

    print
    print &#39;Changing i&#39;
    i.value *= i.value

    print &#39;Changing s&#39;
    s.raw = &#39;bar&#39;

    new_i = raw_input(&#39;Enter a new value for i: &#39;)
    i.value = int(new_i)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;b.py&lt;/strong&gt;&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import mmap
import os
import struct
import time

def main():
    # Open the file for reading
    fd = os.open(&#39;/tmp/mmaptest&#39;, os.O_RDONLY)

    # Memory map the file
    buf = mmap.mmap(fd, mmap.PAGESIZE, mmap.MAP_SHARED, mmap.PROT_READ)

    i = None
    s = None

    while 1:
        new_i, = struct.unpack(&#39;i&#39;, buf[:4])
        new_s, = struct.unpack(&#39;3s&#39;, buf[4:7])

        if i != new_i or s != new_s:
            print &#39;i: %s =&gt; %d&#39; % (i, new_i)
            print &#39;s: %s =&gt; %s&#39; % (s, new_s)
            print &#39;Press Ctrl-C to exit&#39;
            i = new_i
            s = new_s

        time.sleep(1)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/pre&gt;

&lt;p&gt;&lt;small&gt;(Note that I cruelly don&amp;#8217;t clean up /tmp/mmaptest after the scripts finished. Consider it a 4KB tax for anyone who runs arbitrary code they found on the Internet without reading it first.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;[10]: &lt;a href=&#34;http://docs.python.org/library/ctypes&#34;&gt;http://docs.python.org/library/ctypes&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>signalfd</title>
      <link>https://blog.schmichael.com/2011/02/20/signalfd/</link>
      <pubDate>Mon, 21 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2011/02/20/signalfd/</guid>
      <description>&lt;p&gt;&lt;em&gt;This article covers&lt;/em&gt; signalfd&lt;em&gt;, a system call only available on Linux. If anyone knows of an equivalent for OSX or BSDs,&lt;abbrev title=&#34;If there&#39;s something like signalfd for Windows, I&#39;m sorry but I really couldn&#39;t care less.&#34;&gt;*&lt;/abbrev&gt; please &lt;a href=&#34;https://blog.schmichael.com/about-me/&#34;&gt;let me know&lt;/a&gt;. It&amp;#8217;d be great to create a compatibility layer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Writing asynchronous IO code is fun; handling signals is not. &lt;a href=&#34;http://www.kernel.org/doc/man-pages/online/pages/man2/signalfd.2.html&#34;&gt;signalfd&lt;/a&gt; allows you to move your signal handling code into your main event loop instead of hooking up global handlers and using the featureless &lt;a href=&#34;http://docs.python.org/library/signal#signal.set_wakeup_fd&#34;&gt;set_wakeup_fd&lt;/a&gt; function to break the main loop.&lt;/p&gt;

&lt;p&gt;Luckily &lt;a href=&#34;https://launchpad.net/python-signalfd&#34;&gt;Jean-Paul Calderone had already created a great Python wrapper for the signalfd and sigprocmask system calls&lt;/a&gt;. Unfortunately it doesn&amp;#8217;t include a way to parse the siginfo_t structure which contains all the useful information about the signal you&amp;#8217;re handling.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve added a helper to do just that in a branch:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://code.launchpad.net/~schmichael/python-signalfd/helpers&#34;&gt;https://code.launchpad.net/~schmichael/python-signalfd/helpers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sample program would look like:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import os
import select
import signal

import signalfd


def sigfdtest():
    # Catch them all!
    sigs = []
    for attr in dir(signal):
        if attr.startswith(&#39;SIG&#39;) and not attr.startswith(&#39;SIG_&#39;):
            sigs.append(getattr(signal, attr))

    sfd = signalfd.create_signalfd(sigs)
    print &#39;Capturing: %r&#39; % sorted(sigs)
    
    while 1:
        print &#39;selecting - pid: %d&#39; % os.getpid()
        r = select.select([sfd], [], [])[0]
        for s in r:
            assert s is sfd, &#39;Python nicely re-uses the fd instance&#39;
            sig = signalfd.read_signalfd(sfd)
            print sig
                

if __name__ == &#39;__main__&#39;:
    sigfdtest()
&lt;/pre&gt;

&lt;p&gt;When run you can throw some signals at it:&lt;/p&gt;

&lt;pre&gt;Capturing: [6, 14, 7, 17, 17, 18, 8, 1, 4, 2, 29, 6, 9, 13, 29, 27, 30, 3, 64, 34, 11, 19, 31, 15, 5, 20, 21, 22, 23, 10, 12, 26, 28, 24, 25]
selecting - pid: 6523
^CSIGINT
selecting - pid: 6523
^CSIGINT
selecting - pid: 6523
SIGHUP
selecting - pid: 6523
Killed
&lt;/pre&gt;

&lt;p&gt;Of course you&amp;#8217;ll need to use an uninterpretable signal like KILL to exit.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bugs.python.org/issue8407&#34;&gt;Jean-Paul attempted to get signalfd included in Python 2.7&amp;#8217;s signal module, and it was slated for inclusion in 3.2&lt;/a&gt;. However, given that &lt;a href=&#34;http://www.python.org/download/releases/3.2/&#34;&gt;3.2&lt;/a&gt; was just &lt;a href=&#34;http://docs.python.org/release/3.2/library/signal&#34;&gt;released without it&lt;/a&gt;, I&amp;#8217;m guessing the attempt to get this functionality into Python&amp;#8217;s stdlib has been forgotten.&lt;/p&gt;

&lt;p&gt;Up next: [eventfd][8] perhaps?&lt;/p&gt;

&lt;p&gt;[8]: &lt;a href=&#34;http://www.kernel.org/doc/man-pages/online/pages/man2/eventfd.2.html&#34;&gt;http://www.kernel.org/doc/man-pages/online/pages/man2/eventfd.2.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying Python behind Nginx Talk Slides</title>
      <link>https://blog.schmichael.com/2011/01/25/deploying-python-behind-nginx-talk-slides/</link>
      <pubDate>Tue, 25 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2011/01/25/deploying-python-behind-nginx-talk-slides/</guid>
      <description>&lt;p&gt;I gave a talk on deploying Python WSGI apps behind &lt;a href=&#34;http://wiki.nginx.org/&#34;&gt;nginx&lt;/a&gt; at the &lt;a href=&#34;http://wiki.python.org/moin/PortlandPythonUserGroup&#34;&gt;Portland Python User Group&lt;/a&gt; meeting on January 11th and finally got around to publishing the slides: &lt;a href=&#34;https://docs.google.com/present/edit?id=0Ab7GDIugV1qCZGR6c3d6YnJfMTA1aGRtZmJxYzI&amp;amp;hl=en&#34;&gt;schmingx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I should mention &lt;a href=&#34;http://discorporate.us/jek/&#34;&gt;Jason Kirtland&lt;/a&gt; informed me after the meeting that &lt;a href=&#34;http://www.fastcgi.com/devkit/doc/fcgi-spec.html&#34;&gt;FastCGI&lt;/a&gt; supports [persistent connections (and a host of other features)][6] between a load balancer and backend app servers.&lt;/p&gt;

&lt;p&gt;[6]: &lt;a href=&#34;http://www.fastcgi.com/devkit/doc/fcgi-spec.html#S3.5&#34;&gt;http://www.fastcgi.com/devkit/doc/fcgi-spec.html#S3.5&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 9.10 on a Thinkpad T400</title>
      <link>https://blog.schmichael.com/2009/11/11/ubuntu-9-10-on-a-thinkpad-t400/</link>
      <pubDate>Thu, 12 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/11/11/ubuntu-9-10-on-a-thinkpad-t400/</guid>
      <description>&lt;p&gt;I upgraded from Ubuntu 9.04 to &lt;a href=&#34;http://www.ubuntu.com/products/whatisubuntu/910features&#34;&gt;9.10&lt;/a&gt; on my Lenovo Thinkpad T400 about a week ago, and thought I&amp;#8217;d write down some of my impressions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ATI graphics card with proprietary binary driver &amp;#8211; just works (much better than 9.04 as well).&lt;/li&gt;
&lt;li&gt;Suspend &amp;amp; hibernate work flawlessly.&lt;/li&gt;
&lt;li&gt;Boots fast.&lt;/li&gt;
&lt;li&gt;Upgrade worked flawlessly.&lt;/li&gt;
&lt;li&gt;Sound (better volume panel!), wifi, USB, network printer, bluetooth (option to turn it on/off!), webcam, etc. all still work.&lt;/li&gt;
&lt;li&gt;New theme is nice.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I manually &lt;a href=&#34;http://ext4.wiki.kernel.org/index.php/Ext4_Howto#Converting_an_ext3_filesystem_to_ext4&#34;&gt;upgraded my filesystem to ext4&lt;/a&gt; and &lt;a href=&#34;https://wiki.ubuntu.com/KernelTeam/Grub2Testing&#34;&gt;grub from version 1 to 2&lt;/a&gt;. It was a bit scary but worked out fine. Can&amp;#8217;t really feel a difference, but my laptop is mainly a dumb terminal for running web browsers and ssh. &lt;/ul&gt;
&lt;strong&gt;&lt;a href=&#34;http://live.gnome.org/Empathy&#34;&gt;Empathy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu replaced Pidgin with Empathy as the default IM client in Ubuntu 9.10. I think because Empathy supports voice/video chat and Pidgin doesn&amp;#8217;t? I&amp;#8217;ve used video chat once in my life and that was through Skype on Linux. It worked great, but it&amp;#8217;s really not a feature I care about.&lt;/p&gt;

&lt;p&gt;So for someone like me who doesn&amp;#8217;t care about Empathy&amp;#8217;s singular advantage over Pidgin, Empathy is a major step backward. At first it was extremely crashy, but a recent update seems to have fixed that. However, now it mysteriously loses messages. I&amp;#8217;m a very light IM user, but it would start silently missing messages a few hours into the day every day.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve switched back to Pidgin and couldn&amp;#8217;t be happier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Message Notification applet deal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Empathy integrates with the message notification applet deal along with Evolution. Other apps may as well, but evidently I don&amp;#8217;t use any of them. My top panel is 75% whitespace, so the singular benefit of Ubuntu&amp;#8217;s consolidated message notification applet was completely lost on me.&lt;/p&gt;

&lt;p&gt;So much like Empathy, I removed this specialized applet as well. I&amp;#8217;m much happier with per-application icons anyway and fail to see what the benefit of consolidating them is (unless you have a really cramped top panel).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I like it, but then I installed Chromium. Now the bold window titles and expansive title bars in Metacity look bulky and antiquated. Gnome really needs to evolve their window manager and default UI. Chrome is an excellent example of how to design a compact, minimal, yet still pleasant and intuitive user interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://wiki.ubuntu.com/SoftwareCenter&#34;&gt;Ubuntu Software Center&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What a curious little replacement for the old Add/Remove Applications program. I think I see the direction they&amp;#8217;re headed, but it definitely feels like rolled out a beta program to replace a perfectly functional and stable one.&lt;/p&gt;

&lt;p&gt;The left pane with expansive whitespace and 2 options &lt;em&gt;hints&lt;/em&gt; that there might be more categories in the future, but right now it just looks like a mistake. Like maybe something isn&amp;#8217;t working properly, and I&amp;#8217;m not seeing all the options I should see.&lt;/p&gt;

&lt;p&gt;At any rate, I hope Ubuntu adds an App Store that even includes evil proprietary software. I&amp;#8217;d love to be able to plunk down a few bucks for a game like [Braid][6] directly from Ubuntu Software Center. That&amp;#8217;d be great! Maybe Canonical could even pocket a few pennies and start making Linux-on-the-desktop profitable. Now I&amp;#8217;m just dreaming though&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottom Line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;9.10 is a solid and safe upgrade for any users of previous versions. Not sure there&amp;#8217;s anything new to win over users from OS X or Windows though.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[6]: &lt;a href=&#34;http://braid-game.com/&#34;&gt;http://braid-game.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Gnome 3.0: A Real Web Desktop</title>
      <link>https://blog.schmichael.com/2009/06/02/my-gnome-30-a-real-web-desktop/</link>
      <pubDate>Wed, 03 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/06/02/my-gnome-30-a-real-web-desktop/</guid>
      <description>&lt;p&gt;So I missed the &lt;a href=&#34;http://www.google.com/cse?cx=007525575524326405779%3Ac0gv0y410u0&amp;amp;q=gnome+3.0&amp;amp;cof=FORID%3A0&#34;&gt;stream of What I Want for &lt;strike&gt;Christmas&lt;/strike&gt; Gnome 3.0&lt;/a&gt; by &amp;#8230; a while, but better late than never!*&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Win&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Essentially what I want for Gnome 3.0 is what &lt;a href=&#34;http://automorphic.blogspot.com/2009/05/tomboy-0151-release-brings-new-online.html&#34;&gt;Tomboy just got: a web interface&lt;/a&gt; called &lt;a href=&#34;http://live.gnome.org/Snowy&#34;&gt;Snowy&lt;/a&gt;. Part synchronization, part collaboration, all &amp;#8220;cloud&amp;#8221; for those buzzword minded among us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Fail&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Luckily there&amp;#8217;s already Conduit which I think does the synchronization bit&amp;#8230; I say &amp;#8220;I think&amp;#8221; because I&amp;#8217;ve never actually gotten Conduit to work. I drag &amp;amp; drop F-Spot onto the canvas**, neat. I drag &amp;amp; drop Network to the right of F-Spot, neat. Now what? There&amp;#8217;s no configure option for Network. Heck, there&amp;#8217;s not even a Remove*** for Network. I right click and select Synchronize in hopes it will prompt me for details, but instead it happily reports synchronization is finished. &lt;em&gt;Huh?!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I poke around in Preferences hoping for guidance on how to sync to another computer over a network. Wow. The first tab is fine, but the other 2 tabs are just long lists of text. Wait a second, if you scroll &lt;em&gt;horizontally&lt;/em&gt; to the right in the Data Providers tab you can see a checkbox to load/unload them! Why you&amp;#8217;d want this option other than for development, I&amp;#8217;m not sure, but its there if you know where to look.&lt;/p&gt;

&lt;p&gt;At this point &lt;em&gt;Conduit has failed to gain my trust, so I give up.&lt;/em&gt; I&amp;#8217;m fine with Pidgin being crash happy or Eclipse being ridiculously complex to configure. The former isn&amp;#8217;t mission critical and the latter is intended for developers.&lt;/p&gt;

&lt;p&gt;However, I&amp;#8217;m expected to entrust all of my files to Conduit. Files and account information for network resources if I could figure out how to get that to work. I have pretty high expectations for anything I&amp;#8217;m entrusting my files and passwords too. Right now Conduit seems more like a demo of GTK+&amp;#8217;s canvas drawing abilities (it is pretty looking) than a powerful synchronization tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dream&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My expectations for web enabling Gnome are &lt;strong&gt;insanely&lt;/strong&gt; high.&lt;/em&gt; Synchronization isn&amp;#8217;t enough (although it&amp;#8217;d be an excellent start). I need web enabled collaboration features as well. I need it to Just Work&amp;trade; as well as be Secure By Default&amp;trade;.&lt;/p&gt;

&lt;p&gt;This means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All applications can synchronize their &lt;em&gt;settings&lt;/em&gt; and &lt;em&gt;data&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;All data has some sort of web viewable format and ideally a way to interact with it on the web as well.&lt;/li&gt;
&lt;li&gt;By default all settings and data should be &lt;em&gt;private&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Fine-grained CRUD permissions for all settings and data. The C&lt;small&gt;reate&lt;/small&gt; and U&lt;small&gt;pdate&lt;/small&gt; are key here: not only should I be able to give other users the ability to edit my files but Grandma should be able to upload photos to my photo album.&lt;/li&gt;
&lt;li&gt;While I&amp;#8217;m dreaming can I add versioning support (&lt;a href=&#34;https://www.getdropbox.com/referrals/NTE2ODkwNDk&#34;&gt;like Dropbox&lt;/a&gt;)? Cool, thanks. 😉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Implementation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately I think Conduit is the wrong way to go. The concept is sound, but &lt;a href=&#34;http://www.jwz.org/doc/worse-is-better.html&#34;&gt;Worse Is Better&amp;trade;&lt;/a&gt;: each application needs to be allowed to implement their own integration with the cloud synchronization and collaboration system. There&amp;#8217;s too many application specific tasks to accomplish intuitive synchronization and collaboration features outside the main application.&lt;/p&gt;

&lt;p&gt;Tomboy has had pretty good synchronization for a while now. &lt;a href=&#34;https://labs.mozilla.com/projects/weave/&#34;&gt;Firefox is getting it with Weave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a way F-Spot and Banshee support 1-way synchronization and collaboration. F-Spot can upload photos to a variety of services which have all (or at least most) of the features I&amp;#8217;m pining for. Banshee&amp;#8217;s ability to download Podcasts and music synchronize to iPods (note: I&amp;#8217;ve never used that feature) is a sort of primordial synchronization. If only &lt;a href=&#34;http://idea.opensuse.org/content/ideas/web-interface-to-banshee-library&#34;&gt;Banshee Web&lt;/a&gt; had survived (and wasn&amp;#8217;t written in ASP.NET, the ickiest of all webdev platforms). [Abiword has been toying with cloud services for a little while as well.][8]&lt;/p&gt;

&lt;p&gt;Perhaps Evolution is the poster child for this: I currently use it as a Gmail and Gcal interface sometimes because there are certain use cases for which I prefer it (shocking I know!). Despite its past reputation for being bloated and buggy, it Just Works&amp;tm; these days and integrates beautifully with the rest of the Gnome desktop (are those calendar events in my system tray calendar?! amazing! Pidgin integration?! &amp;lt;3 Evolution). Evolution lives completely in the cloud and synchronizes everything locally beautifully (after years and years of effort). &lt;strong&gt;Why Gnome Can Do It&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Gimp is actually the first Gnome app to really make me realize working on the web &lt;em&gt;can&lt;/em&gt; and &lt;em&gt;should&lt;/em&gt; be as easy as working locally. All it did was utilize Gnome&amp;#8217;s VFS to edit and save images via FTP or SSH. With Gnome&amp;#8217;s screenshot tool, I can save a screenshot to a web accessible location in 1 keypress and 2 clicks. Amazing! Thats almost as fast and easy as using a pastebin tool on the command line for sharing text.&lt;/p&gt;

&lt;p&gt;Snowy seems like an excellent poster child for the web interface I&amp;#8217;m whining about. I haven&amp;#8217;t used it yet, but the very idea that Tomboy already has an open source reference implementation is an excellent start. 3rd parties could implement the protocols and offer competing services.&lt;/p&gt;

&lt;p&gt;In an ideal world this would create a revenue stream for open source applications: services like Dropbox could support the synchronization and collaboration protocols and in return support development of the projects. The more people who use apps that integrate seamlessly with Dropbox, the more people who pay for Dropbox&amp;#8230; or box.net or Amazon or&amp;#8230; you get the idea.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeDesktop.org Does What?!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s right, FreeDesktop.org needs to lead the charge here. Its not enough that the protocols are open, application developers need libraries to make synchronization and collaboration &lt;em&gt;easy&lt;/em&gt;. In that way Conduit is right: each application should not completely reinvent the wheel.&lt;/p&gt;

&lt;p&gt;FreeDesktop.org needs to follow Mozilla&amp;#8217;s lead. Mozilla realized early on that in order for their browser business to succeed, they needed &lt;em&gt;open standards to succeed&lt;/em&gt;. FreeDesktop.org needs to do the same. A KDE application should be able to synchronize to the same service as a Gnome app (this is where Conduit&amp;#8217;s monolithic-master-synchronization-app model seems too optimistic to succeed). OSX and Windows apps should be able to use the base synchronization libraries as well, even if they don&amp;#8217;t use GTK+ or QT.&lt;/p&gt;

&lt;p&gt;At the end of the day I should be able to sync my photos, documents, and mp3s between my laptop, desktop, cell phone, Kindle, etc as well as any relevant application settings (Tomboy for Kindle?! yes please!). &amp;#8230;and so much more.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* Not always true. For example: posting opinions on a piece of software long after the roadmap has been made.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;** Strike 1 against Conduit: &amp;#8220;Canvas&amp;#8221; isn&amp;#8217;t a very end user friendly term &lt;abbr title=&#34;in my humble opinion&#34;&gt;IMHO&lt;/abbr&gt;. A minor complaint, but as confusing as the UI already is, it needs all the help it can get. Perhaps the problem isn&amp;#8217;t the name &amp;#8220;Canvas&amp;#8221; but rather that the fact that it doesn&amp;#8217;t even need to be said. Remove all references to it and just put a textbox that says &amp;#8220;Drop data providers here.&amp;#8221; when the canvas is empty. The &amp;#8220;Clear canvas&amp;#8221; option can just be &amp;#8220;Clear&amp;#8221; as there&amp;#8217;s really only 1 thing that can be cleared.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;*** Strike 1.5: &amp;#8220;Remove&amp;#8221; would be better than &amp;#8220;Delete&amp;#8221;. Delete makes me wonder if its going to erase my files! Remove seems more descriptive and precise. Also, drop &amp;#8220;item&amp;#8221; from the end of each right click menu option. Its redundant when every option operates on the item you clicked.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;[8]: &lt;a href=&#34;http://www.abisource.com/wiki/AbiCollab&#34;&gt;http://www.abisource.com/wiki/AbiCollab&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping all your notes in sync with Dropbox and Tomboy</title>
      <link>https://blog.schmichael.com/2009/04/17/in-sync-with-dropbox-and-tomboy/</link>
      <pubDate>Sat, 18 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/04/17/in-sync-with-dropbox-and-tomboy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://projects.gnome.org/tomboy/&#34;&gt;Tomboy&lt;/a&gt; is a wonderful note taking program for Gnome. It has some synchronization features built-in, but not everyone has a server to store their notes for synchronizing between multiple computers.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://www.getdropbox.com/referrals/NTE2ODkwNDk&#34;&gt;Dropbox&lt;/a&gt;: a service for synchronizing files between computers. It works great in Gnome (Windows and Mac OSX as well).&lt;/p&gt;

&lt;p&gt;I use Dropbox for synchronizing my Tomboy notes by telling Tomboy to synchronize to a Local Folder: &lt;code&gt;~/Dropbox/Tomboy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;My one gripe is that you have to go into a note to synchronize. [Someone has filed a bug and submitted a patch][3], so hopefully it will be fixed soon.&lt;/p&gt;

&lt;p&gt;[3]: &lt;a href=&#34;http://bugzilla.gnome.org/show_bug.cgi?id=468459&#34;&gt;http://bugzilla.gnome.org/show_bug.cgi?id=468459&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crowdsourcing my OS Bridge Talk Proposal</title>
      <link>https://blog.schmichael.com/2009/03/29/crowdsourcing-my-os-bridge-talk-proposal/</link>
      <pubDate>Mon, 30 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/03/29/crowdsourcing-my-os-bridge-talk-proposal/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&#34;http://opensourcebridge.org/proposals/119&#34;&gt;Submitted my proposal&lt;/a&gt;, but please still leave me comments! I can still edit my proposal.&lt;/p&gt;

&lt;p&gt;Web server performance has been a hot topic for some time now as Apache hasn&amp;#8217;t been the only viable option for a few years.&lt;/p&gt;

&lt;p&gt;I want to do a talk at &lt;a href=&#34;http://opensourcebridge.org/&#34;&gt;OS Bridge&lt;/a&gt; doing practical comparisons between the popular web site hosting options available today. There&amp;#8217;s plenty of requests per second comparisons between the major HTTP servers out there, so I want to go beyond and compare a wide variety of metrics in a wide variety of environments.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s what I&amp;#8217;m thinking so far, but &lt;strong&gt;I&amp;#8217;d love your feedback!&lt;/strong&gt; I&amp;#8217;m really excited about the possibility of presenting at a large conference like OS Bridge and want to make my talk as exciting and useful as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Metrics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requests per second (serially* and concurrent)&lt;/li&gt;
&lt;li&gt;Memory usage&lt;/li&gt;
&lt;li&gt;Features (extensibility, modularity, etc)&lt;/li&gt;
&lt;li&gt;Community (support options, tools/modules available, etc)&lt;/li&gt;
&lt;li&gt;Portability&lt;/li&gt;
&lt;li&gt;Reliability (can I crash it? how well does it handle load?)&lt;/li&gt;
&lt;li&gt;Ease of setup and maintenance (floods of patches? hideous config file?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Web Servers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The usual suspects (will definitely test):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt; 2.2 (prefork &lt;em&gt;and&lt;/em&gt; worker mpms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.net/&#34;&gt;Nginx&lt;/a&gt; 0.6.x (latest stable)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;Lighttpd&lt;/a&gt; 1.4.x (latest stable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nginx 0.5.x (legacy)&lt;/li&gt;
&lt;li&gt;Nginx 0.7.x (latest dev)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cherokee-project.com/&#34;&gt;Cherokee&lt;/a&gt; (not sure if its really popular enough yet to bother)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cherrypy.org&#34;&gt;CherryPy&lt;/a&gt; and some other language specific or just less known servers would be fun.&lt;/li&gt;
&lt;li&gt;IIS &amp;#8211; It&amp;#8217;d be really fun if I could find someone willing to help me run my tests on IIS. I definitely won&amp;#8217;t be setting it up myself though!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Test Cases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is where things become &lt;em&gt;really&lt;/em&gt; complicated. I don&amp;#8217;t want to just download static files from each server and pretend like thats a real world use case, but at the same time the various environments I could come up with are nearly limitless.&lt;/p&gt;

&lt;p&gt;I want to strive to cover the most common environments** as well as a few variations that produce interesting results.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wordpress.org/&#34;&gt;WordPress&lt;/a&gt; (mod-php where applicable and FastCGI)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://drupal.org/&#34;&gt;Drupal&lt;/a&gt; (mod-php where applicable and FastCGI)&lt;/li&gt;
&lt;li&gt;Bugzilla, Redmine, and Trac (to test a few non-trivial apps from 3 popular languages)&lt;/li&gt;
&lt;li&gt;trivial &lt;a href=&#34;http://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; app (mod-python &amp;amp; mod-wsgi on Apache, FastCGI everywhere)&lt;/li&gt;
&lt;li&gt;trivial &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt; app (need advice from RoR devs on common deployment methods)&lt;/li&gt;
&lt;li&gt;trivial Zend Framework app (or is there a more popular php framework?)&lt;/li&gt;
&lt;li&gt;something from the Java world?&lt;/li&gt;
&lt;li&gt;maybe something fairly obscure like &lt;a href=&#34;http://www.seaside.st/&#34;&gt;Seaside&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wow, that seems like a lot to cover thoroughly, but I think the research will be a lot of fun to do.&lt;/p&gt;

&lt;p&gt;Please let me know your thoughts either in the comments, on &lt;a href=&#34;http://twitter.com/schmichael&#34;&gt;twitter (@schmichael)&lt;/a&gt;, on &lt;a href=&#34;http://opensourcebridge.org/2009/03/open-source-bridge-is-on-irc/&#34;&gt;IRC (schmichael again)&lt;/a&gt;, or via [e-mail][15].&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;small&gt;&lt;br /&gt; * Its interesting to compare &lt;em&gt;serial&lt;/em&gt; to &lt;em&gt;parallel&lt;/em&gt; req/sec to give people an idea of how well the technology will scale &lt;em&gt;on a single server&lt;/em&gt;. I&amp;#8217;ll make sure to note good serial performance can often be turned into good parallel performance by using a load balancing proxy and multiple instances of your application server.&lt;br /&gt; ** All Linux based for simplicity unless someone volunteers to run the tests on other platforms.&lt;br /&gt; &lt;/small&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;[15]: mailto:michael+osbridge@susens-schurter.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Laptop: Acer Extensa 4630Z</title>
      <link>https://blog.schmichael.com/2009/03/22/new-laptop-acer-extensa-4630z/</link>
      <pubDate>Mon, 23 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/03/22/new-laptop-acer-extensa-4630z/</guid>
      <description>&lt;p&gt;I bought a laptop recently because being a web consultant and tied to a desktop is not only embarrassing, but is a quick way to lose (or at least frustrate) clients who&amp;#8217;d love to see my hairy hacker face on-site.&lt;/p&gt;

&lt;p&gt;I use Linux, Firefox, and vim for work so my requirements for a laptop basically came down to WiFi. I also didn&amp;#8217;t want something big and clunky because I&amp;#8217;m looking to augment my desktop, not replace it.&lt;/p&gt;

&lt;p&gt;I finally settled on searching in the 13&amp;#8243;-14&amp;#8243; range for anything with dual cores (so Flash can destroy 1 core while the other lets me continue to work unphased) and 2 GB of RAM (that usually gives me &amp;gt; 1 GB for harddrive caching which speeds things up a lot &amp;#8212; plenty of room to run an XP VM as well).&lt;/p&gt;

&lt;p&gt;Despite affectionately nicknaming my aging Thinkpad a &amp;#8220;Brickpad&amp;#8221; due to its big-black-box design, I love Thinkpads and have found them to be exceptionally well made and reliable. Unfortunately they just weren&amp;#8217;t in the budget this around around.&lt;/p&gt;

&lt;p&gt;At this point my search had narrowed down a bit, and I began searching for the easiest way to get the most bang for my buck: getting a laptop without Microsoft Windows. Even if Windows only adds $50 to the purchase price, that&amp;#8217;s a significant amount of money when you&amp;#8217;re shopping in the $500-600 range. That and I can remote into the XP VM on my desktop for cross-browser testing (my only use for Windows).&lt;/p&gt;

&lt;p&gt;Unfortunately with the exception of tiny netbooks, there aren&amp;#8217;t many Windowless laptops out there (not paying extra for an Apple either, sorry). Dell has one (or a few?), but I&amp;#8217;ve had too many bad experiences with Dells dying prematurely (IMHO, YMMV, etc). HP lets you get Windowless laptops, but only if you pay extra to customize your laptop. Oh well.&lt;/p&gt;

&lt;p&gt;So once I gave up on that dream, I just went for cheap and found an &lt;a href=&#34;http://us.acer.com/acer/productv.do?link=oln15e.redirect&amp;amp;changedAlts=&amp;amp;CRC=1511809838&#34;&gt;Acer Extensa 4630Z&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux on an Acer Extensa 4630Z&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I decided to go with Ubuntu 8.10 instead of my usual choice of Debian and fought around with getting /home and my swap partition encrypted. I&amp;#8217;ll probably keep using Debian on servers, but its politics have just gotten so annoying as to convince me I never really want to work to become a member of that community.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s the rundown of what works, what doesn&amp;#8217;t:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ralink RT2860 802.11b/g/Draft-N WiFi adapter &amp;#8211; Ugh. Its &amp;#8220;working&amp;#8221; using [Ralink&amp;#8217;s drivers][2], but not with Network Manager. I&amp;#8217;ll have to keep playing around with it, but for now its working adequately.&lt;/li&gt;
&lt;li&gt;Crazy &amp;euro; and $ keys above the arrow keys do &lt;em&gt;not&lt;/em&gt; work, but I&amp;#8217;m not sure what purpose they serve.&lt;/li&gt;
&lt;li&gt;Intel graphics card works fine with Compiz (although I just use Metacity).&lt;/li&gt;
&lt;li&gt;Suspend but &lt;em&gt;not&lt;/em&gt; hibernate. Argh! Does hibernate work for any Linux users? I haven&amp;#8217;t even tried in years.&lt;/li&gt;
&lt;li&gt;Webcam, speakers, mic, &amp;amp; screen dimming work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will interesting to see how I like moving from a Debian desktop to an Ubuntu laptop.&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&#34;http://www.ralinktech.com/ralink/Home/Support/Linux.html&#34;&gt;http://www.ralinktech.com/ralink/Home/Support/Linux.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(Yet Another) Deploying Django with CherryPy Script</title>
      <link>https://blog.schmichael.com/2009/02/18/deploying-django-with-cherrypy/</link>
      <pubDate>Wed, 18 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2009/02/18/deploying-django-with-cherrypy/</guid>
      <description>&lt;p&gt;Recently I deployed a &lt;a href=&#34;http://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; project on an OSX server. I foolishly thought this would be as easy as on Linux until I ran into the mess that is _x86&lt;em&gt;64&lt;/em&gt; Apache + &lt;a href=&#34;http://www.modwsgi.org/&#34;&gt;mod_wsgi&lt;/a&gt;* + Django + psycopg2 + &lt;em&gt;i386&lt;/em&gt; PostgreSQL. After wasting far too much time googling and recompiling various bits trying to get everything happy, I followed &lt;a href=&#34;http://www.eflorenzano.com/blog/post/hosting-django-site-pure-python/&#34;&gt;Eric Florenzano&amp;#8217;s post&lt;/a&gt; on deploying Django using &lt;a href=&#34;http://www.cherrypy.org/&#34;&gt;CherryPy&lt;/a&gt;&amp;#8216;s** [wsgiserver][5].&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s my lightly modified version of Eric&amp;#8217;s script:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;import wsgiserver
import sys
import os
import django.core.handlers.wsgi

if __name__ == &#34;__main__&#34;:
    # Setup paths - a bit hackish, but works for me.
    # Assumes an absolute path is stored in &amp;lt;project&gt;.local_settings.ROOT
    sys.path.append(os.path.realpath(os.path.dirname(__file__)))
    from foo.local_settings import ROOT
    sys.path.append(ROOT)

    # Startup Django
    os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;foo.settings&#39;
    server = wsgiserver.CherryPyWSGIServer(
        (&#39;0.0.0.0&#39;, 8888),  # Use &#39;127.0.0.1&#39; to only bind to the localhost
        django.core.handlers.wsgi.WSGIHandler()
    )
    try:
        server.start()
    except KeyboardInterrupt:
        print &#39;Stopping&#39;
        server.stop()
&lt;/pre&gt;

&lt;p&gt;I also went with the latest stable version of CherryPy&amp;#8217;s wsgiserver instead of checking out trunk like Eric&amp;#8217;s post suggested.&lt;/p&gt;

&lt;p&gt;Then I just enabled &lt;code&gt;mod_proxy&lt;/code&gt; in Apache and setup the following VirtualHost:&lt;/p&gt;

&lt;pre lang=&#34;apache&#34;&gt;&amp;lt;Proxy *&gt;
    Order allow,deny
    Allow from all
&amp;lt;/Proxy&gt;
&amp;lt;Location &#34;/&#34;&gt;
    ProxyPass http://127.0.0.1:8888/
    ProxyPassReverse http://127.0.0.1:8888/
&amp;lt;/Location&gt;
&lt;/pre&gt;

&lt;p&gt;If you&amp;#8217;re cool you&amp;#8217;ll write some sort of system specific script to launch your web app on boot. In a pinch, you can always use a crontab:&lt;/p&gt;

&lt;pre lang=&#34;bash&#34;&gt;@reboot /usr/bin/python /path/to/app.py &amp;#038;
&lt;/pre&gt;

&lt;p&gt;YMMV 😉&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;br /&gt; * To mod_wsgi&amp;#8217;s credit, it took about 10 seconds to compile, generated a Universal binary, and in general Just Worked.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;
  ** I&amp;#8217;m already a CherryPy fan thanks to &lt;a href=&#34;http://www.dowski.com/&#34;&gt;dowski&lt;/a&gt;, so it wasn&amp;#8217;t a hard decision.&lt;br /&gt; &lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;http://www.cherrypy.org/wiki/CherryPyDownload#StandaloneWSGIserver&#34;&gt;http://www.cherrypy.org/wiki/CherryPyDownload#StandaloneWSGIserver&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Release Lenny!</title>
      <link>https://blog.schmichael.com/2008/12/27/release-lenny/</link>
      <pubDate>Sat, 27 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2008/12/27/release-lenny/</guid>
      <description>&lt;p&gt;An article from &lt;a href=&#34;http://www.theregister.co.uk/2008/12/27/mysql_slowing_down/&#34;&gt;El Reg about MySQL&lt;/a&gt; ends with a great quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the same lesson that Debian hasn&amp;#8217;t yet learned from Ubuntu: fast and good-enough always beats slow and correct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Release &lt;a href=&#34;http://www.debian.org/releases/lenny/&#34;&gt;Lenny&lt;/a&gt; now!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Yay! It appears [Debian has voted that binary firmware blobs in the Linux kernel are GPL compatible][3] unless explicitly proven otherwise! AFAIK this is in line with Linus&amp;#8217;s reasoning as well. Regardless of the &amp;#8220;law,&amp;#8221; end users benefit greatly from these blobs, and this means Lenny will hopefully be released much sooner than if another option had won!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;The poor thing [Lenny] is already out of date (Old version of OpenOffice.org, 2 versions old on the kernel now, a version behind with Gnome, even further behind with KDE I believe, etc.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;[3]: &lt;a href=&#34;http://master.debian.org/~secretary/gr_lenny/results.txt&#34;&gt;http://master.debian.org/~secretary/gr_lenny/results.txt&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Server Quandary</title>
      <link>https://blog.schmichael.com/2008/12/27/web-server-quandary/</link>
      <pubDate>Sat, 27 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2008/12/27/web-server-quandary/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt; was probably the first Linux application I learned how to configure. However, I&amp;#8217;ve gotten a bit frustrated with it recently&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A memory leak.&lt;/em&gt; Apache is eating up memory so quickly that I need to restart it every couple days or risk my entire server grinding to a halt as it starts swapping wildly. I&amp;#8217;ve poured over log files and &lt;code&gt;pmap&lt;/code&gt; output, but I still can&amp;#8217;t figure out where the problem lies. Curse you monolithic in-process architecture!&lt;/p&gt;

&lt;p&gt;Actually I know what my problem is, I&amp;#8217;m running a mess of modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssl&lt;/code&gt; &amp;#8211; 2 certificates on 2 ports&lt;/li&gt;
&lt;li&gt;&lt;code&gt;php5&lt;/code&gt; &amp;#8211; blerg, who doesn&amp;#8217;t have to run this?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;suphp&lt;/code&gt; &amp;#8211; I suspect this is my problem, but I can&amp;#8217;t prove it. A client&amp;#8217;s 3rd party web application &lt;em&gt;requires&lt;/em&gt; it, but I think its easily replaceable with FastCGI.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wsgi&lt;/code&gt; &amp;#8211; No complaints. Python apps are out-of-process thankfully.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxy&lt;/code&gt; &amp;#8211; Again no complaints. Can&amp;#8217;t imagine how this module could cause any problems except it does proxy some large (multi-megabyte, not huge) POSTs at times. I can&amp;#8217;t imagine a memory leak could slip into this module without a lot of people noticing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solution A: Apache+FastCGI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I love the idea of putting each web application in its own process and letting Apache just act as an HTTP router. FastCGI seems to have all the features I need, and I&amp;#8217;m not really worried about the CPU overhead incurred by IPC.&lt;/p&gt;

&lt;p&gt;However, there are 2 competing FastCGI modules for Apache, and I have no idea what to choose. Anecdotally the official &lt;a href=&#34;http://www.fastcgi.com/drupal/node/3&#34;&gt;mod_fastcgi&lt;/a&gt; is buggy and &lt;a href=&#34;http://www.fastcgi.com/drupal/node/2&#34;&gt;fastcgi.com is a spam infested wasteland&lt;/a&gt;. However, I&amp;#8217;ve found no authoritative source saying: &lt;em&gt;&amp;#8220;fastcgi is dead, long live &lt;a href=&#34;http://fastcgi.coremail.cn/&#34;&gt;fcgid&lt;/a&gt;!&amp;#8221;&lt;/em&gt; (Lame excuse, I know.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution B: &lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;Lighttpd&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I know Lighty is the darling of Rails sites, but whenever I stop by its site I&amp;#8217;m greeted with a list of recently fixed &lt;a href=&#34;http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=lighttpd&#34;&gt;security bugs&lt;/a&gt;, and now it seems as though &lt;a href=&#34;http://blog.lighttpd.net/articles/2008/12/02/a-little-heads-up&#34;&gt;they&amp;#8217;re rewriting the core&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure Lighty is a high quality intelligently engineered project, but it seems to be the definition of immature. Not necessarily bad (in fact it usually means its progressing quickly!), but perhaps not as reliable as good old workhorses like Apache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution C: &lt;a href=&#34;http://www.cherokee-project.com/&#34;&gt;Cherokee&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve been following Cherokee for some time now and running it locally on my workstation. I &lt;em&gt;love&lt;/em&gt; the web interface. I&amp;#8217;m usually a very anti-webmin, pro-vim kind of guy, but I&amp;#8217;m sick of editing Apache&amp;#8217;s config files. I do it about once a month and therefore it always takes lots of double-checking the docs. I don&amp;#8217;t know why, but its configuration has just never felt natural to me.&lt;/p&gt;

&lt;p&gt;However, the lead Cherokee developer&amp;#8217;s bravado is by the most off-putting aspect of the project. &lt;a href=&#34;http://lists.octality.com/pipermail/cherokee/2008-December/009437.html&#34;&gt;He mocks modwsgi&lt;/a&gt; and posts simplistic benchmarks showing Cherokee to be the fastest web server, but meanwhile Cherokee churns out numerous bug patch releases in-between feature releases and has yet to reach 1.0 status.&lt;/p&gt;

&lt;p&gt;It seems like an excellent project technically, but I&amp;#8217;m afraid there will be negative consequences for the lead developers hubris. &lt;small&gt;(I&amp;#8217;m not meaning to insult the guy. He&amp;#8217;s probably a far better hacker than I&amp;#8217;ll ever be. Self-promotion just makes me uncomfortable.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution D: [nginx][10]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t know much about nginx except that it works. Basically all I&amp;#8217;ve heard about it is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It works.&lt;/li&gt;
&lt;li&gt;Its fast. &lt;em&gt;Really&lt;/em&gt; fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While &amp;#8220;working&amp;#8221; is definitely my primary objective, nginx seems a bit bare bones for me. I just don&amp;#8217;t think I&amp;#8217;m the target demographic. I&amp;#8217;d kind of like for my web server to handle spawning and kill of FastCGI processes.&lt;/p&gt;

&lt;p&gt;nginx feels like git to me. Those who know it: use it and love it. Those who don&amp;#8217;t: stand in fear and awe of its unbridled power.&lt;/p&gt;

&lt;p&gt;&amp;#8230;or maybe its just a nice simple barebones HTTP server&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think &lt;strong&gt;Solution A: FastCGI&lt;/strong&gt; is the most sensible. Apache has always served me well, and the memory leak is most likely due to that shoddy suphp module.&lt;/p&gt;

&lt;p&gt;Moving my web applications to FastCGI is also the best way to prepare to move to one of these 2nd generation web servers.&lt;/p&gt;

&lt;p&gt;However, I&amp;#8217;m getting kind of sick of Apache, and the ambiguousness of which FastCGI solution to choose is fairly annoying.&lt;/p&gt;

&lt;p&gt;So dear lazyweb, for your everyday web developer consultant looking to run a bunch of PHP and Python web applications, what HTTP server stack should I use? (Debian Lenny packages are a plus.)&lt;/p&gt;

&lt;p&gt;[10]: &lt;a href=&#34;http://nginx.net/&#34;&gt;http://nginx.net/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing Gnome Notification’s Popup Location</title>
      <link>https://blog.schmichael.com/2008/12/01/fixing-gnome-notifications-popup-location/</link>
      <pubDate>Tue, 02 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2008/12/01/fixing-gnome-notifications-popup-location/</guid>
      <description>&lt;p&gt;Gnome notifications popup in the lower left corner of your desktop by default* which constantly annoys me. I usually have a terminal open in the lower left corner, and having my work covered by notifications is quite annoying.&lt;/p&gt;

&lt;p&gt;Luckily the fix is easy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Applications &amp;gt; System Tools &amp;gt; Configuration Editor**&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;apps&lt;/code&gt; &amp;gt; &lt;code&gt;notification-daemon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;popup_location&lt;/code&gt; to be something less annoying. I prefer &lt;strong&gt;&lt;code&gt;top_right&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Close Configuration Editor. Changes will take effect next time you login &lt;em&gt;or&lt;/em&gt; just restart the notification-daemon: &lt;pre lang=&#34;bash&#34;&gt;~$ killall notification-daemon
~$ /usr/lib/notification-daemon/notification-daemon &amp;#038;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that the notifications will actually show up over the top of your panel which seems a bit strange. However, I&amp;#8217;d rather the notification covered the panel than take up any more precious application space than is necessary.&lt;/p&gt;

&lt;p&gt;Luckily you can easily test notifications if you have Python and python-notify installed:&lt;/p&gt;

&lt;pre lang=&#34;python&#34;&gt;&gt;&gt;&gt; import pynotify
&gt;&gt;&gt; pynotify.init(&#39;foo&#39;)
True
&gt;&gt;&gt; pynotify.Notification(&#39;foo&#39;, &#39;bar&#39;).show()
True
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.schmichael.com/files/notification-top_right.png&#34; alt=&#34;Notification in the upper right.&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;at least on Gnome 2.22.3 on Debian Sid with notification-daemon 0.3.7-1+b1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** aka &lt;a href=&#34;http://projects.gnome.org/gconf/&#34;&gt;gconf-editor&lt;/a&gt; from the [gconf-editor package][3] which should be installed with Gnome.&lt;/p&gt;

&lt;p&gt;[3]: &lt;a href=&#34;http://packages.debian.org/search?keywords=gconf-editor&amp;amp;searchon=names&amp;amp;suite=all&amp;amp;section=all&amp;amp;sourceid=mozilla-search&#34;&gt;http://packages.debian.org/search?keywords=gconf-editor&amp;amp;searchon=names&amp;amp;suite=all&amp;amp;section=all&amp;amp;sourceid=mozilla-search&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fedora’s Crypto Consolidation</title>
      <link>https://blog.schmichael.com/2008/10/20/fedoras-crypto-consolidation/</link>
      <pubDate>Mon, 20 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2008/10/20/fedoras-crypto-consolidation/</guid>
      <description>&lt;p&gt;I just found out Fedora is attempting to consolidate on &lt;a href=&#34;http://developer.mozilla.org/en/NSS&#34;&gt;Mozilla&amp;#8217;s NSS&lt;/a&gt; for &lt;a href=&#34;http://fedoraproject.org/wiki/FedoraCryptoConsolidation&#34;&gt;system-wide cryptography&lt;/a&gt;. I love the idea and hope it succeeds as it will make using crypto so much easier for system administrators and users.&lt;/p&gt;

&lt;p&gt;Since humans are the weakest link in the security chain, improving the human interaction with crypto is a much bigger security win than the latest impossible-to-crack-by-the-NSA-in-a-bajillion-years algorithm. While switching libraries isn&amp;#8217;t exactly a huge UI win, having a single application to manage all of your certificates, keys, passwords, etc. would be.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d love to see Debian, Ubuntu, Suse, et al, get on board as well because this is the sort of initiative that simply won&amp;#8217;t happen upstream. Upstream developers have already chosen a crypto library and probably like it. The burden of tight integration is definitely the job of system engineers and packagers.&lt;/p&gt;

&lt;p&gt;I submitted an Ubuntu Brainstorm Idea, so please feel free to vote on it if you&amp;#8217;re so inclined:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://brainstorm.ubuntu.com/idea/14632/&#34;&gt;&lt;img src=&#34;http://brainstorm.ubuntu.com/idea/14632/image/1/&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would love to submit this idea to Debian as well, but I have no idea where to even start. Probably a mailing list, but I don&amp;#8217;t exactly have the skills to defend this proposition. Eventually bugs would need to be filed against every package that needs to be converted to NSS, but I&amp;#8217;m afraid doing that as just-another-end-user might just anger a bunch of maintainers&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Looks like the [LSB is standardizing on NSS][5] as well.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;I &lt;em&gt;really&lt;/em&gt; need to learn deb packaging&amp;#8230;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;http://ldn.linuxfoundation.org/article/lsb-beta-reveals-new-tools-features-developers&#34;&gt;http://ldn.linuxfoundation.org/article/lsb-beta-reveals-new-tools-features-developers&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adobe Flash in Linux</title>
      <link>https://blog.schmichael.com/2008/09/14/adobe-flash-in-linux/</link>
      <pubDate>Sun, 14 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.schmichael.com/2008/09/14/adobe-flash-in-linux/</guid>
      <description>&lt;p&gt;Like most people, I use Flash a lot. Not only do I watch YouTube and Hulu videos, but FusionCharts* are an integral part of one of the main projects I work on. And like most people, I just want Flash to work. While an open source option would be nice, I really just need something that works.&lt;/p&gt;

&lt;p&gt;Unfortunately &lt;strong&gt;Flash in Linux&lt;/strong&gt; &lt;small&gt;still&lt;/small&gt; &lt;strong&gt;sucks.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;strong&gt;not for long.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flash 9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For a long time I&amp;#8217;ve just used the &lt;a href=&#34;http://packages.debian.org/sid/flashplugin-nonfree&#34;&gt;flashplugin-nonfree&lt;/a&gt; (such an attractive package name) package to get Flash support.&lt;/p&gt;

&lt;p&gt;In general this works great, unless you want to also use &lt;a href=&#34;http://pulseaudio.org/&#34;&gt;PulseAudio&lt;/a&gt;. For some reason I do, which means my audio is always out of sync. Apparently Ubuntu has a flashplugin-nonfree-pulse (another awesome package name), but &lt;a href=&#34;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=477266#35&#34;&gt;Debian won&amp;#8217;t package it because of issues with upstream, and the fact the upcoming Flash 10 works fine without any extra wrappers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flash 10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So I finally decide to just try out the betas of &lt;a href=&#34;http://labs.adobe.com/downloads/flashplayer10.html&#34;&gt;Flash 10&lt;/a&gt;. At this point in time, Flash 10 beta 2, is the latest, so I download it and copy the &lt;code&gt;.so&lt;/code&gt; file to &lt;code&gt;/usr/lib/mozilla/plugins/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tada! Sync&amp;#8217;d audio! Yay!&lt;/p&gt;

&lt;p&gt;Except now my browser crashes on about 1 out of every 2 sites with Flash. Some Flash doesn&amp;#8217;t render completely. Other Flash videos flicker horribly.&lt;/p&gt;

&lt;p&gt;Bottom line is even Ubuntu&amp;#8217;s notoriously unstable alpha&amp;#8217;s are better than trying to use Flash 10 beta 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Just tried Flash 10 RC 1, but its not better than beta 2. Actually it might be a bit better because it crashes &lt;em&gt;less&lt;/em&gt;, but its more frustrating in other ways: &lt;em&gt;some Flash videos don&amp;#8217;t show up at all.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;swfdec&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One last thing to try: &lt;a href=&#34;http://swfdec.freedesktop.org/wiki/&#34;&gt;swfdec&lt;/a&gt;, an open source Flash player. I&amp;#8217;ve followed its development closely on Planet Gnome and really respect its developer, &lt;a href=&#34;http://blogs.gnome.org/otte/&#34;&gt;Benjamin Otte&lt;/a&gt;. Unfortunately it makes Flash 10 beta 2 look good by comparison. To be fair I used the unstable 0.7.4 version of swfdec, so maybe thats why it crashes fairly often. 0.8 was just released, but evidently not packaged for Debian yet.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll probably keep trying swfdec from time to time in the future as I &lt;em&gt;want&lt;/em&gt; to use it, but for now I just need a Flash player that works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Gnash][7]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I should try it, but the FSF can be such dicks I have a hard time even wanting to try it. They have a stupid &amp;#8220;Bad Vista&amp;#8221; logo in the upper right corner of their home page. I&amp;#8217;m no fan of Vista, but plastering the Internet with poorly drawn negative logos isn&amp;#8217;t going to win friends.&lt;/p&gt;

&lt;p&gt;I shouldn&amp;#8217;t let politics affect whats essentially a purely pragmatic endeavor**, so I&amp;#8217;ll probably end up trying it out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I can&amp;#8217;t wait for Flash 10 to be released. While I love open source, Adobe makes excellent products, and I just need Flash to work. Its like my graphics driver: I really don&amp;#8217;t care about the source, just make my graphics work!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* Very pretty product. Decent documentation. Worthless JavaScript API and debugging features. I hope &lt;canvas&gt; becomes a viable alternative soon.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;** That endeavor being: get Flash to work as well in Linux as it does in Windows.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;[7]: &lt;a href=&#34;http://www.gnu.org/software/gnash/&#34;&gt;http://www.gnu.org/software/gnash/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>